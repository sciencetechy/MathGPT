# -*- coding: utf-8 -*-
"""31stDEC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12Ul44KwTv64Vo_Gdx_kokewbKfdTS9uQ
"""

!pip uninstall -y openai
!pip uninstall -y langchain

!pip -q install cohere tiktoken openai==0.28.1

!pip -q install langchain==0.0.330 huggingface_hub

!pip install python-dotenv

!pip install tensorflow-probability gradio
import gradio as gr

import warnings
warnings.filterwarnings('ignore')
warnings.simplefilter('ignore')

import random
import time
from langchain.llms import OpenAI
from langchain.prompts import ChatPromptTemplate
import json
from langchain.chat_models import ChatOpenAI
from langchain import PromptTemplate
from langchain.output_parsers import StructuredOutputParser, ResponseSchema

# Commented out IPython magic to ensure Python compatibility.
# %env OPENAI_API_KEY= Your_API_KEY
TOPIC_PROMPT_ENGG = True
input_file_name = "t.txt"
#llm_model = "gpt-4-0125-preview"
llm_model = "gpt-3.5-turbo-1106"
Verbose = False

def generate_numberlist(integer_size, num_of_oper, decimal_size, difficulty):
  integer_size = int(integer_size)
  num_of_oper = int(num_of_oper)
  decimal_size = int(decimal_size)
  numlist = []

  if difficulty == "Very Easy":
    if integer_size >= 3:
      integer_size -= 2
    elif integer_size == 2:
      integer_size -= 1

    if decimal_size > 0:
      if decimal_size >= 3:
        decimal_size -= 2
      elif decimal_size == 2:
        decimal_size -= 1

  elif difficulty == "Easy":
    if integer_size >= 2:
      integer_size -= 1

    if decimal_size > 0:
      if decimal_size >= 2:
        decimal_size -= 1

  elif difficulty == "Hard":
    integer_size += 1

    if decimal_size > 0:
      decimal_size += 1

  elif difficulty == "Very Hard":
    integer_size += 2

    if decimal_size > 0:
      decimal_size += 2

  if decimal_size == 0:
    for i in range(num_of_oper):
      random_num = random.randint(10**(integer_size-1),10**(integer_size)-1)
      numlist.append(random_num)

  else:
      for i in range(num_of_oper):
        random_num = random.randint(10**(integer_size-1),10**(integer_size)-1)
        random_num = random_num/10**decimal_size
        numlist.append(random_num)

  return numlist

def generate_placevalue(place_value):
  pv = ["ones", "tens", "hundreds", "thousands", "ten thousands"]
  t = False
  for i in pv:
    if place_value == i:
      t = True

  if t:
    index = random.randint(0, 4)
    place_value = pv[index]

  return place_value

def DEBUG(arg1, *argv):
  if Verbose == False:
    return
  print("In function", arg1)
  for arg in argv:
    print(arg, ",")

def gen_op(op_list, difficulty, num_operand):

  n_op_list = op_list[:]
  new_num_int = int(num_operand)
  operators = ["addition", "subtraction", "multiplication", "division"]

  if difficulty == "Very Easy":
    if len(op_list) == 2:
      n_op_list.pop(random.randrange(len(n_op_list)))
      new_num_int -= 1

    elif len(op_list) > 2:
      n_op_list.pop(random.randrange(len(n_op_list)))
      n_op_list.pop(random.randrange(len(n_op_list)))
      new_num_int -= 2

  elif difficulty == "Easy":
    if len(op_list) >= 2:
      n_op_list.pop(random.randrange(len(n_op_list)))
      new_num_int -= 1

  elif difficulty == "Similar":
    n_op_list = op_list
    new_num_int = int(num_operand)

  elif difficulty == "Hard":
    t = random.randint(0, 3)
    n_op_list.append(operators[t])
    new_num_int += 1

  elif difficulty == "Very Hard":
    t = random.randint(0, 3)
    n_op_list.append(operators[t])
    t = random.randint(0, 3)
    n_op_list.append(operators[t])
    new_num_int += 2

  op_list = n_op_list[:]

  return op_list, new_num_int

def get_answer(questions):
  answers = []

  for question in questions:
    llm_answer = answer_output_parser.parse(answer_llm.run(question))
    answers.append(llm_answer["answer"])

  return answers

class Num_Numerations():
  def __init__(self, llm, question):
    self.subtopic_list = ["Adding and subtracting with multi-digit numbers on whole numbers", "Multiplication and division on whole numbers", "Rounding", "Basic decimal operation", "Finding lcm and gcf"]

    self.template = """
    You are a mathematics expert and assistant who helps answer mathematics questions.
    A user will pass in a mathematics question from the topic of Numbers and Numerations. Your job is to classify the subtopic of the mathematical question.

    The answer should be only from one of the following subtopics: Adding and subtracting with multi-digit numbers on whole numbers, Multiplication and division on whole numbers, Rounding, Basic decimal operation, Finding lcm and gcf.
    Don't answer a subtopic that is not provide above
    What subtopic is this mathematic question: \n{format_instructions}\n{question}?
    """
    self.question = question
    self.llm = llm
    self.extracted = False

    self.subtopic_response_schemas = [
    ResponseSchema(name="topic", description="topic of the user's question")
]
    self.subtopic_output_parser = StructuredOutputParser.from_response_schemas(self.subtopic_response_schemas)
    self.format_instructions = self.subtopic_output_parser.get_format_instructions()

    self.subtopic_prompt_template = PromptTemplate(
                          input_variables=["question"],
                          template=self.template,
                          partial_variables={"format_instructions": self.format_instructions}
                          )

    self.subtopic_llm = LLMChain(llm=self.llm, prompt=self.subtopic_prompt_template)
    self.llm_subtopic = self.subtopic_output_parser.parse(self.subtopic_llm.run(self.question))
    self.llm_predicted_subtopic = self.llm_subtopic["topic"]
    self.subtopic_index = self.subtopic_list.index(self.llm_predicted_subtopic)

  def get_subtopic(self):
    return self.llm_predicted_subtopic

  def verify(self):
    AS_VR_Template = """
                      You are a mathematics expert and assistant who helps answer mathematics questions.
                      Answer with a True or False only
                      Does the mathematic question provided involve addition or subtraction with whole numbers: \n{verification_format_instructions}\n{question}?
                      """
    MD_VR_Template = """
                      You are a mathematics expert and assistant who helps answer mathematics questions.
                      Answer with a True or False only
                      Does the mathematic question provided involve multiplication or division with whole numbers: \n{verification_format_instructions}\n{question}?
                      """
    R_VR_Template = """
                      You are a mathematics expert and assistant who helps answer mathematics questions.
                      Answer with a True or False only
                      Does the mathematic question provided involve rounding operations: \n{verification_format_instructions}\n{question}?
                      """
    BD_VR_Template = """
                      You are a mathematics expert and assistant who helps answer mathematics questions.
                      Answer with a True or False only
                      Does the mathematic question provided involve atleast one decimal operand: \n{verification_format_instructions}\n{question}?
                      """

    LG_VR_Template = """
                      You are a mathematics expert and assistant who helps answer mathematics questions.
                      Answer with a True or False only
                      Does the mathematic question provided involve finding the lowest common multiple or greatest common factor: \n{verification_format_instructions}\n{question}?
                      """

    verification_schemas = [
        ResponseSchema(name="verification",
                             description="Does the mathematics question provided involve addition or subtraction with whole numbers?\
                             Answer True if yes,\
                             False if not or unknown."),
        ResponseSchema(name="verification",
                             description="Does the mathematics question provided involve multiplication or division with whole numbers?\
                             Answer True if yes,\
                             False if not or unknown."),
        ResponseSchema(name="verification",
                             description="Does the mathematics question provided involve rounding operations?\
                             Answer True if yes,\
                             False if not or unknown."),
        ResponseSchema(name="verification",
                             description="Does the mathematics question provided involve atleast one decimal operand?\
                             Answer True if yes,\
                             False if not or unknown."),
        ResponseSchema(name="verification",
                             description="Does the mathematic question provided involve finding the lowest common multiple or greatest common factor?\
                             Answer True if yes,\
                             False if not or unknown.")
        ]

    verification_output_parser = StructuredOutputParser.from_response_schemas([verification_schemas[self.subtopic_index]])
    verification_format_instructions = verification_output_parser.get_format_instructions()

    VR_temps = [AS_VR_Template, MD_VR_Template, R_VR_Template, BD_VR_Template, LG_VR_Template]

    prompt_template = PromptTemplate(
      input_variables=["question"],
      template=VR_temps[self.subtopic_index],
      partial_variables={"verification_format_instructions": verification_format_instructions}
    )

    v_llm = LLMChain(llm=self.llm, prompt=prompt_template)
    v_llm = verification_output_parser.parse(v_llm.run(self.question))
    verification = v_llm["verification"]

    return verification

  def extract_question(self):
    place_value_schema = ResponseSchema(name="place value",
                             description="What place value is the question is asking to round to? \
                                          Only answer with the place value and nothing else.")

    operator_list_schema = ResponseSchema(name="list of operators",
                             description="list all the operators used in this mathematics question? \
                                          Answer with a list using the following elements: addition, subtraction, multiplication, division.")

    operand_max_schema = ResponseSchema(name="maximum operand size",
                                description="What is the maximum number of digits an operand has?\
                                              Answer with a number.")

    operand_num_schema = ResponseSchema(name="number of operands",
                                description="How many operands does the mathematical question have? An operand is a number like 15 or 1.5. \
                                              Answer with a number.")

    decimal_operand_schema = ResponseSchema(name="decimal operand size",
                                description="If there is a decimal operand in this mathematic question, what is the max amount of digits there are in the decimal part of the integer?\
                                              Answer with a number and if there is no decimal operand return a zero.")



    ASMDB_extraction_template = """\
                              You are a mathematics expert and assistant who helps answer mathematics questions.

                              list of operators: list all the operators used in this mathematics question. Answer with a list consisting of the following operators: addition, subtraction, multiplication, division.
                              maximum operand size: What is the maximum number of digits an operand has? Answer with a number.
                              number of operands: How many operands does the mathematical question have? An operand is a number like 15 or 1.5. Answer with a number.
                              decimal operand size: If there is a decimal operand in this mathematic question, what is the max amount of digits there are in the decimal part of the integer? Answer with a number and if there is no decimal operand return a zero.

                              Format the output as JSON with the following keys:
                              list of operators
                              maximum operand size
                              number of operands
                              decimal operand size

                              question: {question}

                              {format_instructions}
                              """

    R_extraction_template = """\
                              You are a mathematics expert and assistant who helps answer mathematics questions.

                              place value: What place value is the question is asking to round to? Only answer with the place value and nothing else.
                              maximum operand size: What is the maximum number of digits an operand has? Answer with a number.
                              number of operands: How many operands does the mathematical question have? An operand is a number like 15 or 1.5. Answer with a number.
                              decimal operand size: If there is a decimal operand in this mathematic question, what is the max amount of digits there are in the decimal part of the integer? Answer with a number and if there is no decimal operand return a zero.

                              Format the output as JSON with the following keys:

                              place value
                              maximum operand size
                              number of operands
                              decimal operand size

                              question: {question}

                              {format_instructions}
                              """

    LG_extraction_template = """\
                              You are a mathematics expert and assistant who helps answer mathematics questions.

                              maximum operand size: What is the maximum number of digits an operand has? Answer with a number.
                              number of operands: How many operands does the mathematical question have? An operand is a number like 15 or 1.5. Answer with a number.

                              Format the output as JSON with the following key:

                              maximum operand size
                              number of operands

                              question: {question}

                              {format_instructions}
                              """

    if self.subtopic_index == 2:
      extraction_output_parser = StructuredOutputParser.from_response_schemas([place_value_schema, operand_max_schema, operand_num_schema, decimal_operand_schema])
      extraction_format_instructions = extraction_output_parser.get_format_instructions()

      prompt_template = ChatPromptTemplate.from_template(R_extraction_template)

    elif self.subtopic_index == 4:
      extraction_output_parser = StructuredOutputParser.from_response_schemas([operand_max_schema, operand_num_schema])
      extraction_format_instructions = extraction_output_parser.get_format_instructions()

      prompt_template = ChatPromptTemplate.from_template(LG_extraction_template)

    else:
      extraction_output_parser = StructuredOutputParser.from_response_schemas([operator_list_schema, operand_max_schema, operand_num_schema, decimal_operand_schema])
      extraction_format_instructions = extraction_output_parser.get_format_instructions()

      prompt_template = ChatPromptTemplate.from_template(ASMDB_extraction_template)


    messages = prompt_template.format_messages(question=self.wp,
                                               format_instructions=extraction_format_instructions)
    chat = ChatOpenAI(temperature=0.0)
    response = chat(messages)
    self.features = extraction_output_parser.parse(response.content)

    if self.subtopic_index == 0 or self.subtopic_index == 1 or self.subtopic_index == 3:
      cnt = 0
      crr = False

      while cnt < 3:
        if self.features.get('number of operands')+1 == self.features.get('number of operators'):
          cnt = 3
          crr = True
          self.num_op = self.features.get('number of operands')
        else:
          chat = ChatOpenAI(temperature=0.0)
          response = chat(messages)
          self.features = extraction_output_parser.parse(response.content)
          cnt += 1

      if crr == False:
        self.num_op = len(self.features.get('list of operators')) + 1
      else:
        self.num_op = self.features.get('number of operands')

    DEBUG("NN::extraction of question ===>>>>", self.features)

    self.extracted = True

  def generate_question(self, difficulty, num_questions, wp_question, que, randomness):

    if wp_question == 0:
      AS_DM_BD_gen_Template = """
                    You are a mathematics expert and teacher whose job is to generate new mathematic questions based on a given question.
                    Only provide the generated question and nothing else
                    Generate a mathematics question using the operandlist and operatorlist for operands and operators.
                    Only use the operandlist and operatorlist for the operands and operators.
                    Use all of the operands and operators given.
                    For the operator use symbols instead of words
                    Do not use latex in the generated question use english.

                    operandlist: {operandlist}
                    operatorlist: {operatorlist}
                    """

      R_gen_Template = """
                    You are a mathematics expert and teacher whose job is to generate new mathematic questions based on a given question.
                    Only provide the generated question and nothing else
                    Generate a mathematics question similar to the given question.
                    Only use the following operands from operandlist and the place value from placevalue to generate the question.
                    Don't use the operands and place values given in the question
                    Do not use latex in the generated question use english.

                    question: {question}
                    operandlist: {operandlist}
                    placevalue: {placevalue}
                    """

      LG_gen_Template = """
                    You are a mathematics expert and teacher whose job is to generate new mathematic questions based on a given question.
                    Only provide the generated question and nothing else
                    Generate a mathematics question similar to the given question.
                    Use the following operands and the correct place value to generate the question.
                    Don't use the operands given in the question
                    Do not use latex in the generated question use english.

                    question: {question}
                    operandlist: {operandlist}
                    """

      self.wp = que

    else:
      AS_DM_BD_gen_Template = """
                    You are a mathematics expert and teacher whose job is to generate new mathematic questions based on a given question.
                    Only provide the generated question and nothing else
                    Generate a mathematics question that is similar to the given question.
                    The mathematics question is a word problem use the following operands and operators provided but, make the question much more different so that they don't have anthing related to the given question.
                    Use all the operands and operators provided to generate the question. Use all of them.
                    Do not use latex in the generated question use english.

                    question: {question}
                    operandlist: {operandlist}
                    operatorlist: {operatorlist}
                    """

      R_gen_Template = """
                    You are a mathematics expert and teacher whose job is to generate new mathematic questions based on a given question.
                    Only provide the generated question and nothing else
                    Generate a mathematics question similar to the given question.
                    The mathematics question is a word problem use the following operands and operators provided but, make the question much more different so that they don't have anthing related to the given question.
                    Use the following operands and the correct place value to generate the question.
                    Do not use latex in the generated question use english.

                    question: {question}
                    operandlist: {operandlist}
                    placevalue: {placevalue}
                    """

      LG_gen_Template = """
                    You are a mathematics expert and teacher whose job is to generate new mathematic questions based on a given question.
                    Only provide the generated question and nothing else
                    Generate a mathematics question similar to the given question.
                    The mathematics question is a word problem use the following operands and operators provided but, make the question much more different so that they don't have anthing related to the given question.
                    Use the following operands and the correct place value to generate the question.
                    Do not use latex in the generated question use english.

                    question: {question}
                    operandlist: {operandlist}
                    """

      self.wp = wp_question
      self.llm = ChatOpenAI(model_name=llm_model,
             temperature=randomness,
             max_tokens = 256)

    if not self.extracted:
      self.extract_question()

    if self.subtopic_index == 0 or self.subtopic_index == 1 or self.subtopic_index == 3:
      operator = self.features.get('list of operators')
      op_list, integer_size = gen_op(operator, difficulty, self.num_op)

      operandlist = generate_numberlist(self.features.get('maximum operand size'), integer_size, self.features.get('decimal operand size'), difficulty)

      if wp_question == 0:
        prompt_template = PromptTemplate(
                              input_variables=["operandlist", "operatorlist"],
                              template=AS_DM_BD_gen_Template
                              )

        messages = prompt_template.format(
                      operandlist=str(operandlist),
                      operatorlist=str(op_list))
      else:
        prompt_template = PromptTemplate(
                              input_variables=["question", "operandlist", "operatorlist"],
                              template=AS_DM_BD_gen_Template
                              )

        messages = prompt_template.format(
                      question=que,
                      operandlist=str(operandlist),
                      operatorlist=str(op_list))

      DEBUG("NN ==>> generate:", messages)

      question_llm = OpenAI(model_name=llm_model,
                            temperature=randomness)

      generated_question = question_llm(messages)

    elif self.subtopic_index == 2:
      operandlist = generate_numberlist(self.features.get('maximum operand size'), self.features.get('number of operands'), self.features.get('decimal operand size'), difficulty)
      placevalue = self.features.get('place value')
      placevalue = generate_placevalue(placevalue)


      prompt_template = PromptTemplate(
                            input_variables=["question", "operandlist", "placevalue"],
                            template=R_gen_Template
                            )

      messages = prompt_template.format(
                    question=que,
                    operandlist=str(operandlist),
                    placevalue=placevalue
                    )

      question_llm = OpenAI(model_name=llm_model,
                            temperature=randomness)

      generated_question = question_llm(messages)

    elif self.subtopic_index == 4:
      operandlist = generate_numberlist(self.features.get('maximum operand size'), self.features.get('number of operands'), 0, difficulty)

      prompt_template = PromptTemplate(
                            input_variables=["question", "operandlist"],
                            template=LG_gen_Template
                            )

      messages = prompt_template.format(
                    question=que,
                    operandlist=str(operandlist)
                    )

      question_llm = OpenAI(model_name=llm_model,
                            temperature=randomness)

      generated_question = question_llm(messages)

    return generated_question

class Placeval():
  def __init__(self, llm, question):
    self.subtopic_list = ["Understanding place value"]

    self.template = """
                    You are a mathematics expert and assistant who helps answer mathematics questions.
                    A user will pass in a mathematics question from the topic of Place Value. Your job is to classify the subtopic of the mathematical question.

                    The answer should be only from one of the following subtopics: Understanding place value
                    Don't answer a subtopic that is not provide above
                    What subtopic is this mathematic question: \n{format_instructions}\n{question}?
                    """

    self.question = question
    self.llm = llm
    self.extracted = False

    self.subtopic_response_schemas = [
    ResponseSchema(name="topic", description="topic of the user's question")
]
    self.subtopic_output_parser = StructuredOutputParser.from_response_schemas(self.subtopic_response_schemas)
    self.format_instructions = self.subtopic_output_parser.get_format_instructions()

    self.subtopic_prompt_template = PromptTemplate(
                          input_variables=["question"],
                          template=self.template,
                          partial_variables={"format_instructions": self.format_instructions}
                          )

    self.subtopic_llm = LLMChain(llm=llm, prompt=self.subtopic_prompt_template)
    self.llm_subtopic = self.subtopic_output_parser.parse(self.subtopic_llm.run(self.question))
    self.llm_predicted_subtopic = self.llm_subtopic["topic"]
    self.subtopic_index = self.subtopic_list.index(self.llm_predicted_subtopic)

  def get_subtopic(self):
    return self.llm_predicted_subtopic

  def verify(self):
    PV_VR_Template = """
                      You are a mathematics expert and assistant who helps answer mathematics questions.
                      Answer with a True or False only
                      Does the mathematic question provided involve finding the value of a digit in a number or finding the expanded form of a number or writing a number with words or identifying a number written in words: \n{verification_format_instructions}\n{question}?
                      """

    verification_schemas = [
        ResponseSchema(name="verification",
                             description="Does the mathematic question provided involve finding the value of a digit in a number or finding the expanded form of a number or writing a number with words or identifying a number written in words?\
                             Answer True if yes,\
                             False if not or unknown.")
        ]

    verification_output_parser = StructuredOutputParser.from_response_schemas([verification_schemas[self.subtopic_index]])
    verification_format_instructions = verification_output_parser.get_format_instructions()

    VR_temps = [PV_VR_Template]

    prompt_template = PromptTemplate(
      input_variables=["question"],
      template=VR_temps[self.subtopic_index],
      partial_variables={"verification_format_instructions": verification_format_instructions}
    )

    v_llm = LLMChain(llm=self.llm, prompt=prompt_template)
    v_llm = verification_output_parser.parse(v_llm.run(self.question))
    verification = v_llm["verification"]

    return verification

  def extract_question(self):

    location_schema = ResponseSchema(name="digit location",
                                description="In what specific place value is the digit located in?\
                                              If you don't know answer -1.")

    operand_max_schema = ResponseSchema(name="maximum operand size",
                                description="What is the maximum number of digits an operand has?\
                                              Answer with a number.")

    operand_num_schema = ResponseSchema(name="number of operands",
                                description="How many operands does the mathematical question have?\
                                              Answer with a number.")

    decimal_operand_schema = ResponseSchema(name="decimal operand size",
                                description="If there is a decimal operand in this mathematic question, what is the max amount of digits there are in the decimal part of the integer?\
                                              Answer with a number and if there is no decimal operand return a zero.")

    extraction_output_parser = StructuredOutputParser.from_response_schemas([location_schema, operand_max_schema, operand_num_schema, decimal_operand_schema])
    extraction_format_instructions = extraction_output_parser.get_format_instructions()

    PM_extraction_template = """\
                              You are a mathematics expert and assistant who helps answer mathematics questions.

                              digit location: In what specific place value is the digit located in? If you don't know answer -1.
                              maximum operand size: What is the maximum number of digits an operand has? Answer with a number.
                              number of operands: How many operands does the mathematical question have? Answer with a number.
                              decimal operand size: If there is a decimal operand in this mathematic question, what is the max amount of digits there are in the decimal part of the integer? Answer with a number and if there is no decimal operand return a zero.

                              Format the output as JSON with the following keys and make sure that the keys are double quoted:

                              digit location
                              maximum operand size
                              number of operands
                              decimal operand size

                              question: {question}

                              {format_instructions}
                              """

    prompt_template = ChatPromptTemplate.from_template(PM_extraction_template)

    messages = prompt_template.format_messages(question=self.wp,
                                               format_instructions=extraction_format_instructions)
    chat = ChatOpenAI(temperature=0.0)
    response = chat(messages)
    self.features = extraction_output_parser.parse(response.content)

    DEBUG("Extract pv ===>>>>", self.features)

    self.extracted = True

  def generate_question(self, difficulty, num_questions, wp_question, que, randomness):

    if wp_question == 0:
      PV_gen_Template = """
                    You are a mathematics expert and teacher whose job is to generate new mathematic questions based on a given question.
                    Only provide the generated question and nothing else
                    Generate a mathematics question similar to the given question.
                    Use the following operand list to generate the question.
                    Do not use latex in the generated question use english.

                    question: {question}
                    operandlist: {operandlist}
                    """
      self.wp = que

    else:
      PV_gen_Template = """
                    You are a mathematics expert and teacher whose job is to generate new mathematic questions based on a given question.
                    Only provide the generated question and nothing else
                    Generate a mathematics question similar to the given question.
                    The mathematics question is a word problem use the following operands and operators provided but, make the question much more different so that they don't have anthing related to the given question.
                    Use the following operand list to generate the question.
                    Do not use latex in the generated question use english.

                    question: {question}
                    operandlist: {operandlist}
                    """

      self.wp = wp_question
      self.llm = ChatOpenAI(model_name=llm_model,
             temperature=0.9,
             max_tokens = 256)

    if not self.extracted:
      self.extract_question()

    if self.subtopic_index == 0:
      operandlist = generate_numberlist(self.features.get('maximum operand size'), self.features.get('number of operands'), self.features.get('decimal operand size'), difficulty)

      prompt_template = PromptTemplate(
                            input_variables=["question", "operandlist"],
                            template=PV_gen_Template
                            )

      messages = prompt_template.format(
                    question=que,
                    operandlist=str(operandlist))

      question_llm = OpenAI(model_name=llm_model,
                            temperature=randomness)

      generated_question = question_llm(messages)

    return generated_question

class Fractions():
  def __init__(self, llm, question):
    self.subtopic_list = ["Understanding basic fractions", "Comparing and ordering fractions", "Division of fractions"]

    self.template = """
                    You are a mathematics expert and assistant who helps answer mathematics questions.
                    A user will pass in a mathematics question from the topic of Fractions. Your job is to classify the subtopic of the mathematical question.

                    The answer should be only from one of the following subtopics: Understanding basic fractions, Comparing and ordering fractions, Division of fractions.
                    Only questions requiring the division of fraction should be classified as Division of fractions
                    Don't answer a subtopic that is not provide above
                    What subtopic is this mathematic question: \n{format_instructions}\n{question}?
                    """

    self.question = question
    self.llm = llm
    self.extracted = False

    self.subtopic_response_schemas = [
    ResponseSchema(name="topic", description="topic of the user's question")
]
    self.subtopic_output_parser = StructuredOutputParser.from_response_schemas(self.subtopic_response_schemas)
    self.format_instructions = self.subtopic_output_parser.get_format_instructions()

    self.subtopic_prompt_template = PromptTemplate(
                          input_variables=["question"],
                          template=self.template,
                          partial_variables={"format_instructions": self.format_instructions}
                          )

    self.subtopic_llm = LLMChain(llm=self.llm, prompt=self.subtopic_prompt_template)
    self.llm_subtopic = self.subtopic_output_parser.parse(self.subtopic_llm.run(self.question))
    self.llm_predicted_subtopic = self.llm_subtopic["topic"]
    self.subtopic_index = self.subtopic_list.index(self.llm_predicted_subtopic)
    print(self.llm_predicted_subtopic)

  def get_subtopic(self):
    return self.llm_predicted_subtopic

  def verify(self):
    BF_VR_Template = """
                      You are a mathematics expert and assistant who helps answer mathematics questions.
                      Answer with a True or False only
                      Does the mathematic question provided involve solving problems with basic fractions: \n{verification_format_instructions}\n{question}?
                      """
    COF_VR_Template = """
                      You are a mathematics expert and assistant who helps answer mathematics questions.
                      Answer with a True or False only
                      Does the mathematic question provided involve problems with ordering or comparing fractions: \n{verification_format_instructions}\n{question}?
                      """
    DF_VR_Template = """
                      You are a mathematics expert and assistant who helps answer mathematics questions.
                      Answer with a True or False only
                      Does the mathematic question provided involve problems with division of fractions: \n{verification_format_instructions}\n{question}?
                      """

    verification_schemas = [
        ResponseSchema(name="verification",
                             description="Does the mathematic question provided involve solving problems with basic fractions?\
                             Answer True if yes,\
                             False if not or unknown."),
        ResponseSchema(name="verification",
                             description="Does the mathematic question provided involve problems with ordering or comparing fractions?\
                             Answer True if yes,\
                             False if not or unknown."),
        ResponseSchema(name="verification",
                             description="Does the mathematic question provided involve problems with division of fractions?\
                             Answer True if yes,\
                             False if not or unknown.")
        ]

    verification_output_parser = StructuredOutputParser.from_response_schemas([verification_schemas[self.subtopic_index]])
    verification_format_instructions = verification_output_parser.get_format_instructions()

    VR_temps = [BF_VR_Template, COF_VR_Template, DF_VR_Template]

    prompt_template = PromptTemplate(
      input_variables=["question"],
      template=VR_temps[self.subtopic_index],
      partial_variables={"verification_format_instructions": verification_format_instructions}
    )

    v_llm = LLMChain(llm=self.llm, prompt=prompt_template)
    v_llm = verification_output_parser.parse(v_llm.run(self.question))
    verification = v_llm["verification"]

    return verification

  def extract_question(self):
    numerator_max_schema = ResponseSchema(name="maximum numerator size",
                                description="What is the maximum number of digits a numerator has?\
                                              Answer with a number.")

    fraction_num_schema = ResponseSchema(name="number of fractions",
                                description="How many fractions does the mathematical question have?\
                                              Answer with a number.")

    denominator_max_schema = ResponseSchema(name="maximum denominator size",
                                description="What is the maximum number of digits a denominator has?\
                                              Answer with a number.")

    operator_list_schema = ResponseSchema(name="list of operators",
                             description="list all the operators used in this mathematics question? \
                                          Answer with a list using the following elements: addition, subtraction, multiplication, division.")


    extraction_output_parser = StructuredOutputParser.from_response_schemas([numerator_max_schema, fraction_num_schema, denominator_max_schema, operator_list_schema])
    extraction_format_instructions = extraction_output_parser.get_format_instructions()

    extraction_template = """\
                              You are a mathematics expert and assistant who helps answer mathematics questions.

                              maximum numerator size: What is the maximum number of digits an numerator has? Answer with a number.
                              number of fractions: How many fractions does the mathematical question have? Answer with a number.
                              maximum denominator size: What is the maximum number of digits a denominator has? Answer with a number.
                              list of operators: list all the operators used in this mathematics question. Answer with a list consisting of the following operators: addition, subtraction, multiplication, division.

                              Format the output as JSON with the following keys and make sure that the keys are double quoted:

                              maximum numerator size
                              number of fractions
                              maximum denominator size
                              list of operators

                              question: {question}

                              {format_instructions}
                              """

    prompt_template = ChatPromptTemplate.from_template(extraction_template)

    messages = prompt_template.format_messages(question=self.wp,
                                               format_instructions=extraction_format_instructions)
    chat = ChatOpenAI(temperature=0.0)
    response = chat(messages)
    self.features = extraction_output_parser.parse(response.content)

    DEBUG("Generation FR ===>>", self.features)

    self.extracted = True

  def generate_question(self, difficulty, num_questions, wp_question, que, randomness):
    if wp_question == 0:
      F_gen_Template = """
                    You are a mathematics expert and teacher whose job is to generate new mathematic questions based on a given question.
                    Only provide the generated question and nothing else
                    Generate a mathematics question with the numerator and denominator list for the fractions and the operator list for all the operators that should be used in the question.
                    The mathematics question is a fraction mathematic question so use the numerator list for the numerators and denominator list for the denominators.
                    Use the following operand list for the operators between the fractions.
                    Do not use latex in the generated question use english.

                    numeratorlist: {numeratorlist}
                    denominatorlist: {denominatorlist}
                    operatorlist: {operatorlist}
                    """
      CO_gen_Template = """
                    You are a mathematics expert and teacher whose job is to generate new mathematic questions based on a given question.
                    Only provide the generated question and nothing else
                    Generate a mathematics question with the numerator and denominator list for the fractions and generate the question based on the given question.
                    The generated question should be a comparing or ordering mathematics question so make sure to generate a question about comparing or ordering the fractions.
                    DON'T USE ANY OPERATORS IN THE GENERATED QUESTION.
                    Do not use latex in the generated question use english.


                    question: {question}
                    numeratorlist: {numeratorlist}
                    denominatorlist: {denominatorlist}
                    """
      self.wp = que

    else:
      F_gen_Template = """
                    You are a mathematics expert and teacher whose job is to generate new mathematic questions based on a given question.
                    Only provide the generated question and nothing else
                    Generate a mathematics question similar to the given question.
                    The mathematics question is a word problem use the following operands and operators provided but, make the question much more different so that they don't have anthing related to the given question.
                    Use the following operand list to generate the question.
                    Do not use latex in the generated question use english.

                    question: {question}
                    numeratorlist: {numeratorlist}
                    denominatorlist: {denominatorlist}
                    operatorlist: {operatorlist}
                    """
      CO_gen_Template = """
                    You are a mathematics expert and teacher whose job is to generate new mathematic questions based on a given question.
                    Only provide the generated question and nothing else
                    Generate a mathematics question with the numerator and denominator list for the fractions and generate the question based on the given question.
                    The question is a mathematics word problem so make the question much more different so that they don't have anthing related to the given question.
                    The generated question should be a comparing or ordering mathematics question so make sure to generate a question about comparing or ordering the fractions.
                    DON'T USE ANY OPERATORS IN THE GENERATED QUESTION.
                    Do not use latex in the generated question use english.

                    question: {question}
                    numeratorlist: {numeratorlist}
                    denominatorlist: {denominatorlist}
                    """

      self.wp = wp_question
      self.llm = ChatOpenAI(model_name=llm_model,
             temperature=0.9,
             max_tokens = 256)

    if not self.extracted:
      self.extract_question()

    oplist = self.features.get('list of operators')
    op_list, num_frac = gen_op(oplist, difficulty, self.features.get('number of fractions'))
    numeratorlist = generate_numberlist(self.features.get('maximum numerator size'), num_frac, 0, difficulty)
    denominatorlist = generate_numberlist(self.features.get('maximum denominator size'), num_frac, 0, difficulty)

    if wp_question != 0:
      if self.subtopic_index == 0 or self.subtopic_index == 2:
        prompt_template = PromptTemplate(
                              input_variables=["question", "numeratorlist", "denominatorlist", "operatorlist"],
                              template=F_gen_Template
                              )

        messages = prompt_template.format(
                      question=que,
                      numeratorlist=str(numeratorlist),
                      denominatorlist=str(denominatorlist),
                      operatorlist=str(op_list))

      elif self.subtopic_index == 1:
        prompt_template = PromptTemplate(
                              input_variables=["question", "numeratorlist", "denominatorlist"],
                              template=CO_gen_Template
                              )

        messages = prompt_template.format(
                      question=que,
                      numeratorlist=str(numeratorlist),
                      denominatorlist=str(denominatorlist))

    elif wp_question == 0:
      prompt_template = PromptTemplate(
                      input_variables=["numeratorlist", "denominatorlist", "operatorlist"],
                      template=F_gen_Template
                      )

      messages = prompt_template.format(
                    numeratorlist=str(numeratorlist),
                    denominatorlist=str(denominatorlist),
                    operatorlist=str(op_list))

    elif self.subtopic_index == 1:
      prompt_template = PromptTemplate(
                            input_variables=["question", "numeratorlist", "denominatorlist"],
                            template=CO_gen_Template
                            )

      messages = prompt_template.format(
                    question=que,
                    numeratorlist=str(numeratorlist),
                    denominatorlist=str(denominatorlist))


    question_llm = OpenAI(model_name=llm_model,
                          temperature=randomness)

    generated_question = question_llm(messages)
    if self.subtopic_index == 1:
      if "[operator]" in generated_question:
        generated_question = generated_question.replace("[operator]", "or")


    return generated_question

class Measurement():
  def __init__(self, llm, question):
    self.subtopic_list = ["Measurement units", "Operations with measurement units"]

    self.template = """
                    You are a mathematics expert and assistant who helps answer mathematics questions.
                    A user will pass in a mathematics question from the topic of Units of Measurement. Your job is to classify the subtopic of the mathematical question.

                    The answer should be only from one of the following subtopics: Measurement units, Operations with measurement units.
                    Don't answer a subtopic that is not provide above
                    What subtopic is this mathematic question: \n{format_instructions}\n{question}?
                    """

    self.question = question
    self.llm = llm
    self.extracted = False

    self.subtopic_response_schemas = [
    ResponseSchema(name="topic", description="topic of the user's question")
]
    self.subtopic_output_parser = StructuredOutputParser.from_response_schemas(self.subtopic_response_schemas)
    self.format_instructions = self.subtopic_output_parser.get_format_instructions()

    self.subtopic_prompt_template = PromptTemplate(
                          input_variables=["question"],
                          template=self.template,
                          partial_variables={"format_instructions": self.format_instructions}
                          )

    self.subtopic_llm = LLMChain(llm=llm, prompt=self.subtopic_prompt_template)
    self.llm_subtopic = self.subtopic_output_parser.parse(self.subtopic_llm.run(self.question))
    self.llm_predicted_subtopic = self.llm_subtopic["topic"]
    self.subtopic_index = self.subtopic_list.index(self.llm_predicted_subtopic)

  def get_subtopic(self):
    return self.llm_predicted_subtopic

  def verify(self):
    MU_VR_Template = """
                      You are a mathematics expert and assistant who helps answer mathematics questions.
                      Answer with a True or False only
                      Does the mathematic question provided involve converting between units?: \n{verification_format_instructions}\n{question}?
                      """

    OM_VR_Template = """
                      You are a mathematics expert and assistant who helps answer mathematics questions.
                      Answer with a True or False only
                      Does the mathematic question provided involve basic operations with units?: \n{verification_format_instructions}\n{question}?
                      """

    verification_schemas = [
        ResponseSchema(name="verification",
                             description="Does the mathematic question provided involve converting between units?\
                             Answer True if yes,\
                             False if not or unknown."),

        ResponseSchema(name="verification",
                             description="Does the mathematic question provided involve basic operations with units?\
                             Answer True if yes,\
                             False if not or unknown.")
        ]

    verification_output_parser = StructuredOutputParser.from_response_schemas([verification_schemas[self.subtopic_index]])
    verification_format_instructions = verification_output_parser.get_format_instructions()

    VR_temps = [MU_VR_Template, OM_VR_Template]

    prompt_template = PromptTemplate(
      input_variables=["question"],
      template=VR_temps[self.subtopic_index],
      partial_variables={"verification_format_instructions": verification_format_instructions}
    )

    v_llm = LLMChain(llm=self.llm, prompt=prompt_template)
    v_llm = verification_output_parser.parse(v_llm.run(self.question))
    verification = v_llm["verification"]

    return verification

  def extract_question(self):
    operator_list_schema = ResponseSchema(name="operator list",
                             description="list all the operators used in this mathematics question? \
                                          Answer with a list using the following elements: addition, subtraction, multiplication, division.")

    operand_max_schema = ResponseSchema(name="maximum operand size",
                                description="What is the maximum number of digits an operand has?\
                                              Answer with a number.")

    operand_num_schema = ResponseSchema(name="number of operands",
                                description="How many operands does the mathematical question have?\
                                              Answer with a number.")

    decimal_operand_schema = ResponseSchema(name="decimal operand size",
                                description="If there is a decimal operand in this mathematic question, what is the max amount of digits there are in the decimal part of the integer?\
                                              Answer with a number and if there is no decimal operand return a zero.")

    measurement_unit_schema = ResponseSchema(name="measurement list",
                                description="What units of measurement are in this question?\
                                              if not sure return a zero.")

    extraction_output_parser = StructuredOutputParser.from_response_schemas([operator_list_schema, operand_max_schema, operand_num_schema, decimal_operand_schema])
    extraction_format_instructions = extraction_output_parser.get_format_instructions()

    OM_extraction_template = """\
                              You are a mathematics expert and assistant who helps answer mathematics questions.

                              list of operators: list all the operators used in this mathematics question? Answer with a list using the following elements: addition, subtraction, multiplication, division.
                              maximum operand size: What is the maximum number of digits an operand has? Answer with a number.
                              number of operands: How many operands does the mathematical question have? Answer with a number.
                              decimal operand size: If there is a decimal operand in this mathematic question, what is the max amount of digits there are in the decimal part of the integer? Answer with a number and if there is no decimal operand return a zero.
                              measurement list: What units of measurement are in this question? If not sure return a zero.

                              Format the output as JSON with the following keys and make sure that the keys are double quoted:
                              operator list
                              maximum operand size
                              number of operands
                              decimal operand size
                              measurement list

                              question: {question}

                              {format_instructions}
                              """

    MU_extraction_template = """\
                              You are a mathematics expert and assistant who helps answer mathematics questions.

                              measurement list: What units of measurement in this question? If not sure return a zero.
                              number of operands: How many operands does the mathematical question have? Answer with a number.
                              maximum operand size: What is the maximum number of digits an operand has? Answer with a number.

                              Format the output as JSON with the following keys and make sure that the keys are double quoted:

                              measurement list
                              number of operands
                              maximum operand size

                              question: {question}

                              {format_instructions}
                              """

    if self.subtopic_index == 1:
      extraction_output_parser = StructuredOutputParser.from_response_schemas([operator_list_schema, operand_max_schema, operand_num_schema, decimal_operand_schema])
      extraction_format_instructions = extraction_output_parser.get_format_instructions()

      prompt_template = ChatPromptTemplate.from_template(OM_extraction_template)

    if self.subtopic_index == 0:
      extraction_output_parser = StructuredOutputParser.from_response_schemas([measurement_unit_schema, operand_num_schema, operand_max_schema])
      extraction_format_instructions = extraction_output_parser.get_format_instructions()

      prompt_template = ChatPromptTemplate.from_template(MU_extraction_template)

    messages = prompt_template.format_messages(question=self.wp,
                                               format_instructions=extraction_format_instructions)
    chat = ChatOpenAI(temperature=0.0)
    response = chat(messages)
    self.features = extraction_output_parser.parse(response.content)

    self.extracted = True

  def generate_question(self, difficulty, num_questions, wp_question, que, randomness):
    if wp_question == 0:
      OM_gen_Template = """
                    You are a mathematics expert and teacher whose job is to generate new mathematic questions based on a given question.
                    Only provide the generated question and nothing else
                    Generate a mathematics question similar to the given question.
                    Use the following operands and operator and measurement unit lists to generate the question.
                    Do not use latex in the generated question use english.

                    question: {question}
                    operandlist: {operandlist}
                    measurementlist: {measurementlist}
                    operatorlist: {operatorlist}
                    """

      MU_gen_Template = """
                    You are a mathematics expert and teacher whose job is to generate new mathematic questions based on a given question.
                    Only provide the generated question and nothing else
                    Generate a mathematics question similar to the given question.
                    Use the following measurement list and operand list to generate the question.
                    Do not use latex in the generated question use english.

                    question: {question}
                    operandlist: {operandlist}
                    measurementlist: {measurementlist}
                    """
      self.wp = que

    else:
      OM_gen_Template = """
                    You are a mathematics expert and teacher whose job is to generate new mathematic questions based on a given question.
                    Only provide the generated question and nothing else
                    Generate a mathematics question similar to the given question.
                    The mathematics question is a word problem use the following operands and operators provided but, make the question much more different so that they don't have anthing related to the given question.
                    Use the following operands and operator and measurement unit lists to generate the question.
                    Do not use latex in the generated question use english.

                    question: {question}
                    operandlist: {operandlist}
                    measurementlist: {measurementlist}
                    operatorlist: {operatorlist}
                    """

      MU_gen_Template = """
                    You are a mathematics expert and teacher whose job is to generate new mathematic questions based on a given question.
                    Only provide the generated question and nothing else
                    Generate a mathematics question similar to the given question.
                    The mathematics question is a word problem use the following operands and operators provided but, make the question much more different so that they don't have anthing related to the given question.
                    Use the following measurement list and operand list to generate the question.
                    Do not use latex in the generated question use english.

                    question: {question}
                    operandlist: {operandlist}
                    measurementlist: {measurementlist}
                    """
      self.wp = wp_question
      self.llm = ChatOpenAI(model_name=llm_model,
             temperature=0.9,
             max_tokens = 256)

    if not self.extracted:
      self.extract_question()

    if self.subtopic_index == 1:
      operatorlist = self.features.get('operator list')
      op_list, num_int = gen_op(operatorlist, difficulty, self.features.get('number of operands'))
      operandlist = generate_numberlist(self.features.get('maximum operand size'), num_int, self.features.get('decimal operand size'), difficulty)
      measurementlist = self.features.get('measurement list')

      prompt_template = PromptTemplate(
                            input_variables=["question", "operandlist", "measurementlist", "operatorlist"],
                            template=OM_gen_Template
                            )

      messages = prompt_template.format(
                    question=que,
                    operandlist=str(operandlist),
                    measurementlist=str(measurementlist),
                    operatorlist=str(op_list))

      question_llm = OpenAI(model_name=llm_model,
                            temperature=randomness)

      generated_question = question_llm(messages)

    if self.subtopic_index == 0:
      operandlist = generate_numberlist(self.features.get('maximum operand size'), self.features.get('number of operands'), 0, difficulty)
      measurementlist = self.features.get('measurement list')

      prompt_template = PromptTemplate(
                            input_variables=["question", "operandlist", "measurementlist"],
                            template=OM_gen_Template
                            )

      messages = prompt_template.format(
                    question=que,
                    operandlist=str(operandlist),
                    measurementlist=str(measurementlist))

      question_llm = OpenAI(model_name=llm_model,
                            temperature=randomness)

      generated_question = question_llm(messages)

    return generated_question

class Geometry():
  def __init__(self, llm, question):
    self.subtopic_list = ["Measuring perimeter and area", "Calculating volume"]

    self.template = """
                    You are a mathematics expert and assistant who helps answer mathematics questions.
                    A user will pass in a mathematics question from the topic of Geometry. Your job is to classify the subtopic of the mathematical question.

                    The answer should be only from one of the following subtopics: Measuring perimeter and area, Calculating volume
                    Don't answer a subtopic that is not provide above
                    What subtopic is this mathematic question: \n{format_instructions}\n{question}?
                    """

    self.question = question
    self.llm = llm
    self.extracted = False

    self.subtopic_response_schemas = [
    ResponseSchema(name="topic", description="topic of the user's question")
]
    self.subtopic_output_parser = StructuredOutputParser.from_response_schemas(self.subtopic_response_schemas)
    self.format_instructions = self.subtopic_output_parser.get_format_instructions()

    self.subtopic_prompt_template = PromptTemplate(
                          input_variables=["question"],
                          template=self.template,
                          partial_variables={"format_instructions": self.format_instructions}
                          )

    self.subtopic_llm = LLMChain(llm=llm, prompt=self.subtopic_prompt_template)
    self.llm_subtopic = self.subtopic_output_parser.parse(self.subtopic_llm.run(self.question))
    self.llm_predicted_subtopic = self.llm_subtopic["topic"]
    self.subtopic_index = self.subtopic_list.index(self.llm_predicted_subtopic)

  def get_subtopic(self):
    return self.llm_predicted_subtopic

  def verify(self):
    PA_VR_Template = """
                      You are a mathematics expert and assistant who helps answer mathematics questions.
                      Answer with a True or False only
                      Does the mathematic question provided involve problems with measuring the perimeter or area of a certain shape: \n{verification_format_instructions}\n{question}?
                      """
    CV_VR_Template = """
                      You are a mathematics expert and assistant who helps answer mathematics questions.
                      Answer with a True or False only
                      Does the mathematic question provided involve problems with measuring the volume of a 3d object: \n{verification_format_instructions}\n{question}?
                      """

    verification_schemas = [
        ResponseSchema(name="verification",
                             description="Does the mathematic question provided involve problems with measuring the perimeter or area of a certain shape?\
                             Answer True if yes,\
                             False if not or unknown."),
        ResponseSchema(name="verification",
                             description="Does the mathematic question provided involve problems with measuring the volume of a 3d object?\
                             Answer True if yes,\
                             False if not or unknown.")
        ]

    verification_output_parser = StructuredOutputParser.from_response_schemas([verification_schemas[self.subtopic_index]])
    verification_format_instructions = verification_output_parser.get_format_instructions()

    VR_temps = [PA_VR_Template, CV_VR_Template]

    prompt_template = PromptTemplate(
      input_variables=["question"],
      template=VR_temps[self.subtopic_index],
      partial_variables={"verification_format_instructions": verification_format_instructions}
    )

    v_llm = LLMChain(llm=self.llm, prompt=prompt_template)
    v_llm = verification_output_parser.parse(v_llm.run(self.question))
    verification = v_llm["verification"]

    return verification

  def extract_question(self):
    operator_list_schema = ResponseSchema(name="operator list",
                             description="list all the operators used in this mathematics question? \
                                          Answer with a list using the following elements: addition, subtraction, multiplication, division.")

    operand_max_schema = ResponseSchema(name="maximum operand size",
                                description="What is the maximum number of digits an operand has?\
                                              Answer with a number.")

    operand_num_schema = ResponseSchema(name="number of operands",
                                description="How many operands does the mathematical question have?\
                                              Answer with a number.")

    decimal_operand_schema = ResponseSchema(name="decimal operand size",
                                description="If there is a decimal operand in this mathematic question, what is the max amount of digits there are in the decimal part of the integer?\
                                              Answer with a number and if there is no decimal operand return a zero.")

    extraction_output_parser = StructuredOutputParser.from_response_schemas([operator_list_schema, operand_max_schema, operand_num_schema, decimal_operand_schema])
    extraction_format_instructions = extraction_output_parser.get_format_instructions()

    PM_extraction_template = """\
                              You are a mathematics expert and assistant who helps answer mathematics questions.

                              list of operators: list all the operators used in this mathematics question? Answer with a list using the following elements: addition, subtraction, multiplication, division.
                              maximum operand size: What is the maximum number of digits an operand has? Answer with a number.
                              number of operands: How many operands does the mathematical question have? Answer with a number.
                              decimal operand size: If there is a decimal operand in this mathematic question, what is the max amount of digits there are in the decimal part of the integer? Answer with a number and if there is no decimal operand return a zero.

                              Format the output as JSON with the following keys and make sure that the keys are double quoted:
                              operator list
                              maximum operand size
                              number of operands
                              decimal operand size

                              question: {question}

                              {format_instructions}
                              """

    prompt_template = ChatPromptTemplate.from_template(PM_extraction_template)

    messages = prompt_template.format_messages(question=self.wp,
                                               format_instructions=extraction_format_instructions)
    chat = ChatOpenAI(temperature=0.0)
    response = chat(messages)
    self.features = extraction_output_parser.parse(response.content)

    self.extracted = True

  def generate_question(self, difficulty, num_questions, wp_question, que, randomness):
    if wp_question == 0:
      G_gen_Template = """
                    You are a mathematics expert and teacher whose job is to generate new mathematic questions based on a given question.
                    Only provide the generated question and nothing else
                    Generate a mathematics question similar to the given question.
                    Use the following operand and operator list to generate the question.
                    Do not use latex in the generated question use english.

                    question: {question}
                    operandlist: {operandlist}
                    operatorlist: {operatorlist}
                    """
      self.wp = que
    else:
      G_gen_Template = """
                    You are a mathematics expert and teacher whose job is to generate new mathematic questions based on a given question.
                    Only provide the generated question and nothing else
                    Generate a mathematics question similar to the given question.
                    The mathematics question is a word problem use the following operands and operators provided but, make the question much more different so that they don't have anthing related to the given question.
                    Use the following operand and operator list to generate the question.
                    Do not use latex in the generated question use english.

                    question: {question}
                    operandlist: {operandlist}
                    operatorlist: {operatorlist}
                    """
      self.wp = wp_question
      self.llm = ChatOpenAI(model_name=llm_model,
             temperature=0.9,
             max_tokens = 256)

    if not self.extracted:
      self.extract_question()

    if self.subtopic_index == 0 or self.subtopic_index == 1:
      operator = self.features.get('operator list')
      op_list, num_int = gen_op(operator, difficulty, self.features.get('number of operands'))
      operandlist = generate_numberlist(self.features.get('maximum operand size'), num_int, self.features.get('decimal operand size'), difficulty)

      prompt_template = PromptTemplate(
                            input_variables=["question", "operandlist", "operatorlist"],
                            template=G_gen_Template
                            )

      messages = prompt_template.format(
                    question=que,
                    operandlist=str(operandlist),
                    operatorlist=str(op_list))

      question_llm = OpenAI(model_name=llm_model,
                            temperature=randomness)

      generated_question = question_llm(messages)

    return generated_question

class Probability():
  def __init__(self, llm, question):
    self.subtopic_list = ["Understanding basic concepts of probability"]

    self.template = """
                    You are a mathematics expert and assistant who helps answer mathematics questions.
                    A user will pass in a mathematics question from the topic of Probability. Your job is to classify the subtopic of the mathematical question.

                    The answer should be only from one of the following subtopics: Understanding basic concepts of probability
                    The subtopic should only be Understanding basic concepts of probability, and nothing else
                    What subtopic is this mathematic question: \n{format_instructions}\n{question}?
                    """

    self.question = question
    self.llm = llm
    self.extracted = False

    self.subtopic_response_schemas = [
    ResponseSchema(name="topic", description="topic of the user's question")
]
    self.subtopic_output_parser = StructuredOutputParser.from_response_schemas(self.subtopic_response_schemas)
    self.format_instructions = self.subtopic_output_parser.get_format_instructions()

    self.subtopic_prompt_template = PromptTemplate(
                          input_variables=["question"],
                          template=self.template,
                          partial_variables={"format_instructions": self.format_instructions}
                          )

    self.subtopic_llm = LLMChain(llm=llm, prompt=self.subtopic_prompt_template)
    self.llm_subtopic = self.subtopic_output_parser.parse(self.subtopic_llm.run(self.question))
    self.llm_predicted_subtopic = self.llm_subtopic["topic"]
    self.subtopic_index = self.subtopic_list.index(self.llm_predicted_subtopic)

  def get_subtopic(self):
    return self.llm_predicted_subtopic

  def verify(self):
    BP_VR_Template = """
                      You are a mathematics expert and assistant who helps answer mathematics questions.
                      Answer with a True or False only
                      Does the mathematic question provided involve problems with finding the chance or probability of an event to occur?: \n{verification_format_instructions}\n{question}?
                      """

    verification_schemas = [
        ResponseSchema(name="verification",
                             description="Does the mathematic question provided involve problems with finding the chance or probability of an event to occur?\
                             Answer True if yes,\
                             False if not or unknown.")
        ]

    verification_output_parser = StructuredOutputParser.from_response_schemas([verification_schemas[self.subtopic_index]])
    verification_format_instructions = verification_output_parser.get_format_instructions()

    VR_temps = [BP_VR_Template]

    prompt_template = PromptTemplate(
      input_variables=["question"],
      template=VR_temps[self.subtopic_index],
      partial_variables={"verification_format_instructions": verification_format_instructions}
    )

    v_llm = LLMChain(llm=self.llm, prompt=prompt_template)
    v_llm = verification_output_parser.parse(v_llm.run(self.question))
    verification = v_llm["verification"]

    return verification

  def extract_question(self):

    operand_max_schema = ResponseSchema(name="maximum operand size",
                                description="What is the maximum number of digits an operand has?\
                                              Answer with a number.")

    operand_num_schema = ResponseSchema(name="number of operands",
                                description="How many operands does the mathematical question have?\
                                              Answer with a number.")

    decimal_operand_schema = ResponseSchema(name="decimal operand size",
                                description="If there is a decimal operand in this mathematic question, what is the max amount of digits there are in the decimal part of the integer?\
                                              Answer with a number and if there is no decimal operand return a zero.")

    extraction_output_parser = StructuredOutputParser.from_response_schemas([operand_max_schema, operand_num_schema, decimal_operand_schema])
    extraction_format_instructions = extraction_output_parser.get_format_instructions()

    PM_extraction_template = """\
                              You are a mathematics expert and assistant who helps answer mathematics questions.

                              maximum operand size: What is the maximum number of digits an operand has? Answer with a number.
                              number of operands: How many operands does the mathematical question have? Answer with a number.
                              decimal operand size: If there is a decimal operand in this mathematic question, what is the max amount of digits there are in the decimal part of the integer? Answer with a number and if there is no decimal operand return a zero.

                              Format the output as JSON with the following keys and make sure that the keys are double quoted:
                              maximum operand size
                              number of operands
                              decimal operand size

                              question: {question}

                              {format_instructions}
                              """

    prompt_template = ChatPromptTemplate.from_template(PM_extraction_template)

    messages = prompt_template.format_messages(question=self.wp,
                                               format_instructions=extraction_format_instructions)
    chat = ChatOpenAI(temperature=0.0)
    response = chat(messages)
    self.features = extraction_output_parser.parse(response.content)

    self.extracted = True

  def generate_question(self, difficulty, num_questions, wp_question, que, randomness):
    if wp_question == 0:
      P_gen_Template = """
                    You are a mathematics expert and teacher whose job is to generate new mathematic questions based on a given question.
                    Only provide the generated question and nothing else
                    Generate a mathematics question similar to the given question.
                    Use the following operand list and operator list to generate the question.
                    Do not use latex in the generated question use english.

                    question: {question}
                    operandlist: {operandlist}
                    """
      self.wp = que

    else:
      P_gen_Template = """
                    You are a mathematics expert and teacher whose job is to generate new mathematic questions based on a given question.
                    Only provide the generated question and nothing else
                    Generate a mathematics question similar to the given question.
                    The mathematics question is a word problem use the following operands and operators provided but, make the question much more different so that they don't have anthing related to the given question.
                    Use the following operand list and operator list to generate the question.
                    Do not use latex in the generated question use english.

                    question: {question}
                    operandlist: {operandlist}
                    """
      self.wp = wp_question
      self.llm = ChatOpenAI(model_name=llm_model,
             temperature=0.9,
             max_tokens = 256)

    if not self.extracted:
      self.extract_question()

    if self.subtopic_index == 0:
      operandlist = generate_numberlist(self.features.get('maximum operand size'), self.features.get('number of operands'), self.features.get('decimal operand size'), difficulty)

      prompt_template = PromptTemplate(
                            input_variables=["question", "operandlist"],
                            template=P_gen_Template
                            )

      messages = prompt_template.format(
                    question=que,
                    operandlist=str(operandlist))

      question_llm = OpenAI(model_name=llm_model,
                            temperature=randomness)

      generated_question = question_llm(messages)

    return generated_question

class Patterns():
  def __init__(self, llm, question):
    self.subtopic_list = ["Identify and extend number patterns", "Recognize and create geometric patterns"]

    self.template = """
                    You are a mathematics expert and assistant who helps answer mathematics questions.
                    A user will pass in a mathematics question from the topic of Patterns. Your job is to classify the subtopic of the mathematical question.

                    The answer should be only from one of the following subtopics: Identify and extend number patterns, Recognize and create geometric patterns
                    Questions that involve patterns that increase when the previous number is multiplied by a fixed integer or patterns that involve shapes should be classified as the topic: Recognize and create geometric patterns
                    Don't answer a subtopic that is not provide above
                    What subtopic is this mathematic question: \n{format_instructions}\n{question}?
                    """

    self.question = question
    self.llm = llm
    self.extracted = False

    self.subtopic_response_schemas = [
    ResponseSchema(name="topic", description="topic of the user's question")
]
    self.subtopic_output_parser = StructuredOutputParser.from_response_schemas(self.subtopic_response_schemas)
    self.format_instructions = self.subtopic_output_parser.get_format_instructions()

    self.subtopic_prompt_template = PromptTemplate(
                          input_variables=["question"],
                          template=self.template,
                          partial_variables={"format_instructions": self.format_instructions}
                          )

    self.subtopic_llm = LLMChain(llm=llm, prompt=self.subtopic_prompt_template)
    self.llm_subtopic = self.subtopic_output_parser.parse(self.subtopic_llm.run(self.question))
    self.llm_predicted_subtopic = self.llm_subtopic["topic"]
    self.subtopic_index = self.subtopic_list.index(self.llm_predicted_subtopic)

  def get_subtopic(self):
    return self.llm_predicted_subtopic

  def verify(self):
    NP_VR_Template = """
                      You are a mathematics expert and assistant who helps answer mathematics questions.
                      Answer with a True or False only
                      Does the mathematic question provided involve problems with expanding a number pattern or finding the next number to come in this pattern?: \n{verification_format_instructions}\n{question}?
                      """

    GP_VR_Template = """
                      You are a mathematics expert and assistant who helps answer mathematics questions.
                      Answer with a True or False only
                      Does the mathematic question provided involve problems with patterns that increase when the previous number is multiplied by a fixed integer or patterns that involve shapes should be classified as the topic?: \n{verification_format_instructions}\n{question}?
                      """

    verification_schemas = [
        ResponseSchema(name="verification",
                             description="Does the mathematic question provided involve problems with expanding a number pattern or finding the next number to come in this pattern?\
                             Answer True if yes,\
                             False if not or unknown."),

        ResponseSchema(name="verification",
                             description="Does the mathematic question provided involve problems with patterns that increase when the previous number is multiplied by a fixed integer or patterns that involve shapes should be classified as the topic?\
                             Answer True if yes,\
                             False if not or unknown.")
        ]

    verification_output_parser = StructuredOutputParser.from_response_schemas([verification_schemas[self.subtopic_index]])
    verification_format_instructions = verification_output_parser.get_format_instructions()

    VR_temps = [NP_VR_Template, GP_VR_Template]

    prompt_template = PromptTemplate(
      input_variables=["question"],
      template=VR_temps[self.subtopic_index],
      partial_variables={"verification_format_instructions": verification_format_instructions}
    )

    v_llm = LLMChain(llm=self.llm, prompt=prompt_template)
    v_llm = verification_output_parser.parse(v_llm.run(self.question))
    verification = v_llm["verification"]

    return verification

  def extract_question(self):

    operand_num_schema = ResponseSchema(name="number of numbers",
                                description="How many operands does the mathematical question have?\
                                              Answer with a number.")

    operand_max_schema = ResponseSchema(name="maximum operand size",
                                description="What is the maximum number of digits an operand has?\
                                              Answer with a number.")

    extraction_output_parser = StructuredOutputParser.from_response_schemas([operand_num_schema, operand_max_schema])
    extraction_format_instructions = extraction_output_parser.get_format_instructions()

    PM_extraction_template = """\
                              You are a mathematics expert and assistant who helps answer mathematics questions.

                              number of numbers: How many numbers does the mathematical question have? Answer with a number.
                              maximum operand size: What is the maximum number of digits an operand has? Answer with a number.

                              Format the output as JSON with the following keys and make sure that the keys are double quoted:

                              number of numbers
                              maximum operand size

                              question: {question}

                              {format_instructions}
                              """

    prompt_template = ChatPromptTemplate.from_template(PM_extraction_template)

    messages = prompt_template.format_messages(question=self.wp,
                                               format_instructions=extraction_format_instructions)
    chat = ChatOpenAI(temperature=0.0)
    response = chat(messages)
    self.features = extraction_output_parser.parse(response.content)

    self.extracted = True

  def generate_question(self, difficulty, num_questions, wp_question, que, randomness):
    if wp_question == 0:
      PT_gen_Template = """
                    You are a mathematics expert and teacher whose job is to generate new mathematic questions based on a given question.
                    Only provide the generated question and nothing else
                    Generate a mathematics question similar to the given question.
                    Generate the question with the given number of numbers.
                    Do not use latex in the generated question use english.

                    question: {question}
                    numberlist: {numberlist}
                    """
      self.wp = que

    else:
      PT_gen_Template = """
                    You are a mathematics expert and teacher whose job is to generate new mathematic questions based on a given question.
                    Only provide the generated question and nothing else
                    Generate a mathematics question similar to the given question.
                    The mathematics question is a word problem use the following operands and operators provided but, make the question much more different so that they don't have anthing related to the given question.
                    Generate the question with the given number of numbers.
                    Do not use latex in the generated question use english.

                    question: {question}
                    numberlist: {numberlist}
                    """
      self.wp = wp_question
      self.llm = ChatOpenAI(model_name=llm_model,
             temperature=0.9,
             max_tokens = 256)

    if not self.extracted:
      self.extract_question()

    if self.subtopic_index == 0 or self.subtopic_index == 1:
      numberlist = generate_numberlist(self.features.get('maximum operand size'), self.features.get('number of numbers'), 0, difficulty)

      prompt_template = PromptTemplate(
                            input_variables=["question", "numberlist"],
                            template=PT_gen_Template
                            )

      messages = prompt_template.format(
                    question=que,
                    numberlist=numberlist)

      question_llm = OpenAI(model_name=llm_model,
                            temperature=randomness)

      generated_question = question_llm(messages)

    return generated_question

class Statistics():
  def __init__(self, llm, question):
    self.subtopic_list = ["Understanding mean, median and mode"]

    self.template = """
                    You are a mathematics expert and assistant who helps answer mathematics questions.
                    A user will pass in a mathematics question from the topic of Statistics. Your job is to classify the subtopic of the mathematical question.

                    The answer should be the following subtopic: Understanding mean, median and mode
                    Don't answer a subtopic that is not provide above
                    What subtopic is this mathematic question: \n{format_instructions}\n{question}?
                    """

    self.question = question
    self.llm = llm
    self.extracted = False

    self.subtopic_response_schemas = [
    ResponseSchema(name="topic", description="topic of the user's question")
]
    self.subtopic_output_parser = StructuredOutputParser.from_response_schemas(self.subtopic_response_schemas)
    self.format_instructions = self.subtopic_output_parser.get_format_instructions()

    self.subtopic_prompt_template = PromptTemplate(
                          input_variables=["question"],
                          template=self.template,
                          partial_variables={"format_instructions": self.format_instructions}
                          )

    self.subtopic_llm = LLMChain(llm=llm, prompt=self.subtopic_prompt_template)
    self.llm_subtopic = self.subtopic_output_parser.parse(self.subtopic_llm.run(self.question))
    self.llm_predicted_subtopic = self.llm_subtopic["topic"]
    self.subtopic_index = self.subtopic_list.index(self.llm_predicted_subtopic)

  def get_subtopic(self):
    return self.llm_predicted_subtopic

  def verify(self):
    MMM_VR_Template = """
                      You are a mathematics expert and assistant who helps answer mathematics questions.
                      Answer with a True or False only
                      Does the mathematic question provided involve questions with mean, median, or mode?: \n{verification_format_instructions}\n{question}?
                      """

    verification_schemas = [
        ResponseSchema(name="verification",
                             description="Does the mathematic question provided involve questions with mean, median, or mode?\
                             Answer True if yes,\
                             False if not or unknown.")
        ]

    verification_output_parser = StructuredOutputParser.from_response_schemas([verification_schemas[self.subtopic_index]])
    verification_format_instructions = verification_output_parser.get_format_instructions()

    VR_temps = [MMM_VR_Template]

    prompt_template = PromptTemplate(
      input_variables=["question"],
      template=VR_temps[self.subtopic_index],
      partial_variables={"verification_format_instructions": verification_format_instructions}
    )

    v_llm = LLMChain(llm=self.llm, prompt=prompt_template)
    v_llm = verification_output_parser.parse(v_llm.run(self.question))
    verification = v_llm["verification"]

    return verification

  def extract_question(self):

    operand_max_schema = ResponseSchema(name="maximum operand size",
                                description="What is the maximum number of digits an operand has?\
                                              Answer with a number.")

    operand_num_schema = ResponseSchema(name="number of operands",
                                description="How many operands does the mathematical question have?\
                                              Answer with a number.")

    extraction_output_parser = StructuredOutputParser.from_response_schemas([operand_max_schema, operand_num_schema])
    extraction_format_instructions = extraction_output_parser.get_format_instructions()

    PM_extraction_template = """\
                              You are a mathematics expert and assistant who helps answer mathematics questions.

                              maximum operand size: What is the maximum number of digits an operand has? Answer with a number.
                              number of operands: How many operands does the mathematical question have? Answer with a number.

                              Format the output as JSON with the following keys and make sure that the keys are double quoted:

                              maximum operand size
                              number of operands

                              question: {question}

                              {format_instructions}
                              """

    prompt_template = ChatPromptTemplate.from_template(PM_extraction_template)

    messages = prompt_template.format_messages(question=self.wp,
                                               format_instructions=extraction_format_instructions)
    chat = ChatOpenAI(temperature=0.0)
    response = chat(messages)
    self.features = extraction_output_parser.parse(response.content)

    self.extracted = True

  def generate_question(self, difficulty, num_questions, wp_question, que, randomness):
    if wp_question == 0:
      S_gen_Template = """
                    You are a mathematics expert and teacher whose job is to generate new mathematic questions based on a given question.
                    Only provide the generated question and nothing else
                    Generate a mathematics question similar to the given question.
                    Use the following operand list and operator list to generate the question.
                    Do not use latex in the generated question use english.

                    question: {question}
                    operandlist: {operandlist}
                    """
      self.wp = que
    else:
      S_gen_Template = """
                    You are a mathematics expert and teacher whose job is to generate new mathematic questions based on a given question.
                    Only provide the generated question and nothing else
                    Generate a mathematics question similar to the given question.
                    The mathematics question is a word problem use the following operands and operators provided but, make the question much more different so that they don't have anthing related to the given question.
                    Use the following operand list and operator list to generate the question.
                    Do not use latex in the generated question use english.

                    question: {question}
                    operandlist: {operandlist}
                    """
      self.wp = wp_question
      self.llm = ChatOpenAI(model_name=llm_model,
             temperature=0.9,
             max_tokens = 256)

    if not self.extracted:
      self.extract_question()

    if self.subtopic_index == 0:
      operandlist = generate_numberlist(self.features.get('maximum operand size'), self.features.get('number of operands'), 0, difficulty)

      prompt_template = PromptTemplate(
                            input_variables=["question", "operandlist"],
                            template=S_gen_Template
                            )

      messages = prompt_template.format(
                    question=que,
                    operandlist=str(operandlist))

      question_llm = OpenAI(model_name=llm_model,
                            temperature=randomness)

      generated_question = question_llm(messages)

    return generated_question

class Algebra():
  def __init__(self, llm, question):
    self.subtopic_list = ["Writing and evaluating expressions", "Solving equations and equalities of one var"]

    self.template = """
                    You are a mathematics expert and assistant who helps answer mathematics questions.
                    A user will pass in a mathematics question from the topic of Algebra. Your job is to classify the subtopic of the mathematical question.

                    The answer should be only from one of the following subtopics: Writing and evaluating expressions, Solving equations and equalities of one var
                    Don't answer a subtopic that is not provide above
                    What subtopic is this mathematic question: \n{format_instructions}\n{question}?
                    """

    self.question = question
    self.llm = llm
    self.extracted = False

    self.subtopic_response_schemas = [
    ResponseSchema(name="topic", description="topic of the user's question")
]
    self.subtopic_output_parser = StructuredOutputParser.from_response_schemas(self.subtopic_response_schemas)
    self.format_instructions = self.subtopic_output_parser.get_format_instructions()

    self.subtopic_prompt_template = PromptTemplate(
                          input_variables=["question"],
                          template=self.template,
                          partial_variables={"format_instructions": self.format_instructions}
                          )

    self.subtopic_llm = LLMChain(llm=llm, prompt=self.subtopic_prompt_template)
    self.llm_subtopic = self.subtopic_output_parser.parse(self.subtopic_llm.run(self.question))
    self.llm_predicted_subtopic = self.llm_subtopic["topic"]
    self.subtopic_index = self.subtopic_list.index(self.llm_predicted_subtopic)

  def get_subtopic(self):
    return self.llm_predicted_subtopic

  def verify(self):
    EE_VR_Template = """
                      You are a mathematics expert and assistant who helps answer mathematics questions.
                      Answer with a True or False only
                      Does the mathematic question provided involve solving problems with finding out what the equation is equal to?: \n{verification_format_instructions}\n{question}?
                      """
    SE_VR_Template = """
                      You are a mathematics expert and assistant who helps answer mathematics questions.
                      Answer with a True or False only
                      Does the mathematic question provided involve problems with finding what the variable is equal to?: \n{verification_format_instructions}\n{question}?
                      """

    verification_schemas = [
        ResponseSchema(name="verification",
                             description="Does the mathematic question provided involve solving problems with finding out what the equation is equal to?\
                             Answer True if yes,\
                             False if not or unknown."),
        ResponseSchema(name="verification",
                             description="Does the mathematic question provided involve problems with finding what the variable is equal to?\
                             Answer True if yes,\
                             False if not or unknown.")
        ]

    verification_output_parser = StructuredOutputParser.from_response_schemas([verification_schemas[self.subtopic_index]])
    verification_format_instructions = verification_output_parser.get_format_instructions()

    VR_temps = [EE_VR_Template, SE_VR_Template]

    prompt_template = PromptTemplate(
      input_variables=["question"],
      template=VR_temps[self.subtopic_index],
      partial_variables={"verification_format_instructions": verification_format_instructions}
    )

    v_llm = LLMChain(llm=self.llm, prompt=prompt_template)
    v_llm = verification_output_parser.parse(v_llm.run(self.question))
    verification = v_llm["verification"]

    return verification

  def extract_question(self):

    operand_max_schema = ResponseSchema(name="maximum operand size",
                                description="What is the maximum number of digits an operand has?\
                                              Answer with a number.")

    operand_num_schema = ResponseSchema(name="number of operands",
                                description="How many operands does the mathematical question have?\
                                              Answer with a number.")

    decimal_operand_schema = ResponseSchema(name="decimal operand size",
                                description="If there is a decimal operand in this mathematic question, what is the max amount of digits there are in the decimal part of the integer?\
                                              Answer with a number and if there is no decimal operand return a zero.")

    extraction_output_parser = StructuredOutputParser.from_response_schemas([operand_max_schema, operand_num_schema, decimal_operand_schema])
    extraction_format_instructions = extraction_output_parser.get_format_instructions()

    PM_extraction_template = """\

                              You are a mathematics expert and assistant who helps answer mathematics questions.
                              maximum operand size: What is the maximum number of digits an operand has? Answer with a number.
                              number of operands: How many operands does the mathematical question have? Answer with a number.
                              decimal operand size: If there is a decimal operand in this mathematic question, what is the max amount of digits there are in the decimal part of the integer? Answer with a number and if there is no decimal operand return a zero.

                              Format the output as JSON with the following keys and make sure that the keys are double quoted:

                              maximum operand size
                              number of operands
                              decimal operand size

                              question: {question}

                              {format_instructions}
                              """

    prompt_template = ChatPromptTemplate.from_template(PM_extraction_template)

    messages = prompt_template.format_messages(question=self.wp,
                                               format_instructions=extraction_format_instructions)
    chat = ChatOpenAI(temperature=0.0)
    response = chat(messages)
    self.features = extraction_output_parser.parse(response.content)

    self.extracted = True

  def generate_question(self, difficulty, num_questions, wp_question, que, randomness):
    if wp_question == 0:
      A_gen_Template = """
                    You are a mathematics expert and teacher whose job is to generate new mathematic questions based on a given question.
                    Only provide the generated question and nothing else
                    Generate a mathematics question similar to the given question.
                    Use the following operand list and operator list to generate the question.
                    Do not use latex in the generated question use english.

                    question: {question}
                    operandlist: {operandlist}
                    """
      self.wp = que
    else:
      A_gen_Template = """
                    You are a mathematics expert and teacher whose job is to generate new mathematic questions based on a given question.
                    Only provide the generated question and nothing else
                    Generate a mathematics question similar to the given question.
                    The mathematics question is a word problem use the following operands and operators provided but, make the question much more different so that they don't have anthing related to the given question.
                    Use the following operand list and operator list to generate the question.
                    Do not use latex in the generated question use english.

                    question: {question}
                    operandlist: {operandlist}
                    """
      self.wp = wp_question
      self.llm = ChatOpenAI(model_name=llm_model,
             temperature=0.9,
             max_tokens = 256)

    if not self.extracted:
      self.extract_question()

    if self.subtopic_index == 0 or self.subtopic_index == 1:
      operandlist = generate_numberlist(self.features.get('maximum operand size'), self.features.get('number of operands'), self.features.get('decimal operand size'), difficulty)

      prompt_template = PromptTemplate(
                            input_variables=["question", "operandlist"],
                            template=A_gen_Template
                            )

      messages = prompt_template.format(
                    question=que,
                    operandlist=str(operandlist))

      question_llm = OpenAI(model_name=llm_model,
                            temperature=randomness)

      generated_question = question_llm(messages)

    return generated_question

class Ratios_Proportions():
  def __init__(self, llm, question):
    self.subtopic_list = ["Understanding and working with ratios and rates", "solving problems involving proportions"]

    self.template = """
                    You are a mathematics expert and assistant who helps answer mathematics questions.
                    A user will pass in a mathematics question from the topic of Rations and Proportions. Your job is to classify the subtopic of the mathematical question.

                    The answer should be only from one of the following subtopics: Understanding and working with ratios and rates, solving problems involving proportions
                    Don't answer a subtopic that is not provide above
                    What subtopic is this mathematic question: \n{format_instructions}\n{question}?
                    """

    self.question = question
    self.llm = llm
    self.extracted = False

    self.subtopic_response_schemas = [
    ResponseSchema(name="topic", description="topic of the user's question")
]
    self.subtopic_output_parser = StructuredOutputParser.from_response_schemas(self.subtopic_response_schemas)
    self.format_instructions = self.subtopic_output_parser.get_format_instructions()

    self.subtopic_prompt_template = PromptTemplate(
                          input_variables=["question"],
                          template=self.template,
                          partial_variables={"format_instructions": self.format_instructions}
                          )

    self.subtopic_llm = LLMChain(llm=llm, prompt=self.subtopic_prompt_template)
    self.llm_subtopic = self.subtopic_output_parser.parse(self.subtopic_llm.run(self.question))
    self.llm_predicted_subtopic = self.llm_subtopic["topic"]
    self.subtopic_index = self.subtopic_list.index(self.llm_predicted_subtopic)

  def get_subtopic(self):
    return self.llm_predicted_subtopic

  def verify(self):
    RR_VR_Template = """
                      You are a mathematics expert and assistant who helps answer mathematics questions.
                      Answer with a True or False only
                      Does the mathematic question provided involve solving problems with knowing the ratio of x to y and then, finding out how much of y there is, if there is a z amount of x: \n{verification_format_instructions}\n{question}?
                      """
    P_VR_Template = """
                      You are a mathematics expert and assistant who helps answer mathematics questions.
                      Answer with a True or False only
                      Does the mathematic question provided involve problems like: Ted likes to run long distances. He can run 20 km in 95 minutes. He wants to know how many kilometers (k) he will go if he runs at the same pace for 285 minutes.: \n{verification_format_instructions}\n{question}?
                      """

    verification_schemas = [
        ResponseSchema(name="verification",
                             description="Does the mathematic question provided involve solving problems with knowing the ratio of x to y and then finding out how much of y there is if there is a z amount of x.\
                             Answer True if yes,\
                             False if not or unknown."),
        ResponseSchema(name="verification",
                             description="Does the mathematic question provided involve problems like: Ted likes to run long distances. He can run 20 km in 95 minutes. He wants to know how many kilometers (k) he will go if he runs at the same pace for 285 minutes.\
                             Answer True if yes,\
                             False if not or unknown.")
        ]

    verification_output_parser = StructuredOutputParser.from_response_schemas([verification_schemas[self.subtopic_index]])
    verification_format_instructions = verification_output_parser.get_format_instructions()

    VR_temps = [RR_VR_Template, P_VR_Template]

    prompt_template = PromptTemplate(
      input_variables=["question"],
      template=VR_temps[self.subtopic_index],
      partial_variables={"verification_format_instructions": verification_format_instructions}
    )

    v_llm = LLMChain(llm=self.llm, prompt=prompt_template)
    v_llm = verification_output_parser.parse(v_llm.run(self.question))
    verification = v_llm["verification"]

    return verification

  def extract_question(self):

    operand_max_schema = ResponseSchema(name="maximum operand size",
                                description="What is the maximum number of digits an operand has?\
                                              Answer with a number.")

    operand_num_schema = ResponseSchema(name="number of operands",
                                description="How many operands does the mathematical question have?\
                                              Answer with a number.")

    decimal_operand_schema = ResponseSchema(name="decimal operand size",
                                description="If there is a decimal operand in this mathematic question, what is the max amount of digits there are in the decimal part of the integer?\
                                              Answer with a number and if there is no decimal operand return a zero.")

    extraction_output_parser = StructuredOutputParser.from_response_schemas([operand_max_schema, operand_num_schema, decimal_operand_schema])
    extraction_format_instructions = extraction_output_parser.get_format_instructions()

    PM_extraction_template = """\
                              You are a mathematics expert and assistant who helps answer mathematics questions.

                              maximum operand size: What is the maximum number of digits an operand has? Answer with a number.
                              number of operands: How many operands does the mathematical question have? Answer with a number.
                              decimal operand size: If there is a decimal operand in this mathematic question, what is the max amount of digits there are in the decimal part of the integer? Answer with a number and if there is no decimal operand return a zero.

                              Format the output as JSON with the following keys and make sure that the keys are double quoted:

                              maximum operand size
                              number of operands
                              decimal operand size

                              question: {question}

                              {format_instructions}
                              """

    prompt_template = ChatPromptTemplate.from_template(PM_extraction_template)

    messages = prompt_template.format_messages(question=self.wp,
                                               format_instructions=extraction_format_instructions)
    chat = ChatOpenAI(temperature=0.0)
    response = chat(messages)
    self.features = extraction_output_parser.parse(response.content)

    self.extracted = True

  def generate_question(self, difficulty, num_questions, wp_question, que, randomness):
    if wp_question == 0:
      RP_gen_Template = """
                    You are a mathematics expert and teacher whose job is to generate new mathematic questions based on a given question.
                    Only provide the generated question and nothing else
                    Generate a mathematics question based on the given question.
                    Use the following operand list and operator list to generate the question.
                    Do not use latex in the generated question use english.

                    question: {question}
                    operandlist: {operandlist}
                    """
      self.wp = que
    else:
      RP_gen_Template = """
                    You are a mathematics expert and teacher whose job is to generate new mathematic questions based on a given question.
                    Only provide the generated question and nothing else
                    Generate a mathematics question based on the given question.
                    The mathematics question is a word problem use the following operands and operators provided but, make the question much more different so that they don't have anthing related to the given question.
                    Use the following operand list and operator list to generate the question.
                    Do not use latex in the generated question use english.

                    question: {question}
                    operandlist: {operandlist}
                    """
      self.wp = wp_question
      self.llm = ChatOpenAI(model_name=llm_model,
             temperature=0.9,
             max_tokens = 256)

    if not self.extracted:
      self.extract_question()

    if self.subtopic_index == 0 or self.subtopic_index == 1:

      operandlist = generate_numberlist(self.features.get('maximum operand size'), self.features.get('number of operands'), self.features.get('decimal operand size'), difficulty)


      prompt_template = PromptTemplate(
                            input_variables=["question", "operandlist"],
                            template=RP_gen_Template
                            )

      messages = prompt_template.format(
                    question=que,
                    operandlist=str(operandlist))

      question_llm = OpenAI(model_name=llm_model,
                            temperature=randomness)

      generated_question = question_llm(messages)

    return generated_question

def generation_of_question_list(question, complexity, numbertimes, mode):
  delimiter = "\n"
  question_list = question.split("Q:")
  gens = []

  gen_que = []
  ans = []
  topics = []

  if '' in question_list:
    question_list.remove('')


  for i in question_list:
    gen = generation_of_question(i, complexity, numbertimes, mode)

    gens.append(gen)

  for i in gens:
    question = i[0]
    answer = i[1]
    topic = i[2]

    if mode == "Only Generation" or mode == "Generate with Answer":
      if "Generated Question:" in question:
        question = question.replace("Generated Question:", "")

      elif "Generated question:" in question:
        question = question.replace("Generated question:", "")

      if "Question:" in question:
        question = question.replace("Question:", "")

    gen_que.append(question)
    ans.append(answer)
    if topic not in topics:
      topics.append(topic)

  if mode == "Only Generation":
    return [delimiter.join(gen_que), None, delimiter.join(topics)]
  elif mode == "Only Answer":
    return [None, delimiter.join(ans), delimiter.join(topics)]
  else:
    return [delimiter.join(gen_que), delimiter.join(ans), delimiter.join(topics)]

def generation_of_question(question, complexity, numbertimes, mode):
  delimiter = "\n"
  temperature = 0
  acc_question = question

  question_list = question.split(delimiter)


# if generating
  if mode == "Only Generation" or mode == "Generate with Answer":

    llm_m = math_output_parser.parse(math_llm.run(question))
    mathquestion = llm_m["math question"]
    word_problem = False



  # if math question
    if mathquestion == "yes" or mathquestion == "Yes":

      llm_w = word_output_parser.parse(word_llm.run(question))
      wordproblem = llm_w["word problem"]



      if wordproblem == "yes" or wordproblem == "Yes":

        llm_chg_wp = chg_wp_output_parser.parse(chg_wp_llm.run(question))
        n_q = llm_chg_wp["equation"]
        question = n_q

      llm_t = output_parser.parse(topic_chain.run(question))
      llm_predicted_topic = llm_t["topic"]
      generated_question = None
      gen_list = []

      if llm_predicted_topic == "Numbers and Numerations":
        topic_obj = Num_Numerations(llm, question)

      elif llm_predicted_topic == "Place Value":
        topic_obj = Placeval(llm, question)

      elif llm_predicted_topic == "Fractions":
        topic_obj = Fractions(llm, question)

      elif llm_predicted_topic == "Units of Measurement":
        topic_obj = Measurement(llm, question)

      elif llm_predicted_topic == "Geometry":
        topic_obj = Geometry(llm, question)

      elif llm_predicted_topic == "Probability":
        topic_obj = Probability(llm, question)

      elif llm_predicted_topic == "Patterns":
        topic_obj = Patterns(llm, question)

      elif llm_predicted_topic == "Statistics":
        topic_obj = Statistics(llm, question)

      elif llm_predicted_topic == "Algebra":
        topic_obj = Algebra(llm, question)

      elif llm_predicted_topic == "Ratios and Proportions":
        topic_obj = Ratios_Proportions(llm, question)

      llm_predicted_subtopic = topic_obj.get_subtopic()

      verification = topic_obj.verify()

# if identified wrong and the predicted topic is Ratios and Proportions
      if verification == False and llm_predicted_topic == "Ratios and Proportions":
        llm_fn = output_parser.parse(fn_llm.run(question))
        llm_predicted_topic = llm_fn["topic"]

        if llm_predicted_topic == "Numbers and Numerations":
          topic_obj = Num_Numerations(llm, question)

        elif llm_predicted_topic == "Fractions":
          topic_obj = Fractions(llm, question)

        llm_predicted_subtopic = topic_obj.get_subtopic()
        verification = topic_obj.verify()

################################################

      if wordproblem == "yes" or wordproblem == "Yes":
        temperature = 0.9
        for i in range(numbertimes):
          generated_question = topic_obj.generate_question(complexity, numbertimes, question, acc_question, temperature)
          gen_list.append(generated_question)
          temperature -= 0.1
          if temperature < 0.3:
            temperature = 0.9

          time.sleep(1)

      else:
        for i in range(numbertimes):
          generated_question = topic_obj.generate_question(complexity, numbertimes, 0, acc_question, temperature)
          gen_list.append(generated_question)
          time.sleep(1)

      if mode == "Only Generation":
        return [delimiter.join(gen_list), None, llm_predicted_topic]




  # if not a mathematics question
    else:
      return ["Sorry only able to generate mathematics question", None, "Unable to classify"]


  if mode == "Generate with Answer":
    answer = get_answer(gen_list)
    return [delimiter.join(gen_list), delimiter.join(answer), llm_predicted_topic]



  elif mode == "Only Answer":
    llm_t = output_parser.parse(topic_chain.run(question))
    llm_predicted_topic = llm_t["topic"]

    answer = get_answer([question])
    return [None, delimiter.join(answer), llm_predicted_topic]

def base_gen(question, difficulty, numbertimes):
  normal_template = """
  Generate a mathematics question with this difficulty level: {difficulty} and make it similar to the question given: {question}?
  """
  generated_questions = []

  prompt_template = PromptTemplate(
                              input_variables=["difficulty", "question"],
                              template=normal_template
                              )

  if difficulty == "Ve":
    difficulty = "Very Easy"
  elif difficulty == "E":
    difficulty = "Easy"

  if difficulty == "M":
    difficulty = "Medium"

  elif difficulty == "H":
    difficulty = "Hard"
  elif difficulty == "VH":
    difficulty = "Very Hard"

  for i in range(numbertimes):
    messages = prompt_template.format(
                    difficulty=difficulty,
                    question=question)

    question_llm = OpenAI(model_name=llm_model,
                          temperature=0.0)

    generated_questions.append(question_llm(messages))

  return [generated_questions, "Temp: Number and Numerations"]

topic_template = """
You are a mathematics expert and assistant who helps answer mathematics questions. .
A user will pass in a mathematics question and you should classify the topic of the question.
The topic should be one of the following class: Numbers and Numerations, Geometry, Place Value, Fractions, Units of Measurement, Probability, Algebra, Statistics, Ratios and Proportions, and Patterns.
Only return the topic and nothing else.
All questions involving mean, median, and mode should be classified as statistics.
All questions involving addition, subtraction, multiplication, and division with whole numbers or decimals should be classified as Numbers and Numerations.
Ratios and proportions are problems like A bicycling club has 88 members, of which 36 are males and the rest are females. What is the ratio of females to males? or The ratio of cakes to cookies is 2:3. If there are 360 cookies, how many cakes are there?
Ratios and proportions are problems that involve ratios and rates
Do not confuse ratios and proportions with Fractions or Numbers and Numerations.

What topic is this mathematic question: \n{format_instructions}\n{question}?
"""

Math_template = """
You are a mathematics expert and assistant who helps answer mathematics questions.
Is this question a mathematics question. A mathematics question is a question that needs to be solved using mathematics?
If the question has any numbers that are being added, subtracted, divided, or multiplied the question is a mathematic question.
Can the question be solved using mathematics? if it can then it is a mathematics question.
Only answer with a yes or no: \n{format_instructions}\n{question}?
"""

word_template = """
You are a mathematics expert and assistant who helps answer mathematics questions.
Is the mathematics question a word problem? Only answer with a yes or no: \n{format_instructions}\n{question}?
"""

chg_wp_template = """
Show what needs to be done to solve this question using an equation with the operands and operators. Don't say anything other than the equation with the operators and operands. \n{format_instructions}\n{question}
"""

normal_template = """
Generate a mathematics question with the difficulty and make it similar to the question given: \n{format_instructions}\n{difficulty}\n{question}?
"""

answer_template = """
Solve the given mathematics question and return the answer. Only return the answer and nothing else: \n{format_instructions}\n{question}?
"""

frac_num_temp = """
You are a mathematics expert and assistant who helps answer mathematics questions.
You are to decide on which topic the question provided below is. The different options are: Numbers and Numerations and Fractions.
All questions involving additing, subtracting, multiplying, and dividing with whole numbers or decimals should be considered as Numbers and Numerations.
All questions involving lcm or gcf should be considered as Numbers and Numerations.
All questions involving comparing fractions or ordering fractions should be considered as Fractions.
All questions involving adding or subtracting or multiplying or dividing fractions should be considered as Fractions.
Only return either Numbers and Numerations or Fractions and nothing else.
Only return the topic and nothing else.

\n{format_instructions}\n{question}?
"""

llm = ChatOpenAI(model_name=llm_model,
             temperature=0.0,
             max_tokens = 256)

response_schemas = [
    ResponseSchema(name="topic", description="topic of the user's question")
]
output_parser = StructuredOutputParser.from_response_schemas(response_schemas)
format_instructions = output_parser.get_format_instructions()


prompt_template = PromptTemplate(
    input_variables=["question"],
    template=topic_template,
    partial_variables={"format_instructions": format_instructions}
)

math_response_schemas = [
    ResponseSchema(name="math question", description="is the question a mathematics question?")
]

math_output_parser = StructuredOutputParser.from_response_schemas(math_response_schemas)
math_format_instructions = math_output_parser.get_format_instructions()

math_prompt_template = PromptTemplate(
    input_variables=["question"],
    template=Math_template,
    partial_variables={"format_instructions": math_format_instructions}
)

word_response_schemas = [
    ResponseSchema(name="word problem", description="is the mathematics question a word problem?")
]

word_output_parser = StructuredOutputParser.from_response_schemas(word_response_schemas)
word_format_instructions = word_output_parser.get_format_instructions()

word_prompt_template = PromptTemplate(
    input_variables=["question"],
    template=word_template,
    partial_variables={"format_instructions": word_format_instructions}
)

chg_wp_response_schemas = [
    ResponseSchema(name="equation", description="Show what needs to be done to solve this question using an equation with the operands and operators")
]

chg_wp_output_parser = StructuredOutputParser.from_response_schemas(chg_wp_response_schemas)
chg_wp_format_instructions = chg_wp_output_parser.get_format_instructions()

chg_wp_prompt_template = PromptTemplate(
    input_variables=["question"],
    template=chg_wp_template,
    partial_variables={"format_instructions": chg_wp_format_instructions}
)

answer_response_schemas = [
    ResponseSchema(name="answer", description="Solve the given mathematics question and return the answer.")
]

answer_output_parser = StructuredOutputParser.from_response_schemas(answer_response_schemas)
answer_format_instructions = answer_output_parser.get_format_instructions()

answer_prompt_template = PromptTemplate(
    input_variables=["question"],
    template=answer_template,
    partial_variables={"format_instructions": answer_format_instructions}
)

fn_response_schemas = [
    ResponseSchema(name="topic", description="topic of the question provided")
]
fn_output_parser = StructuredOutputParser.from_response_schemas(fn_response_schemas)
fn_format_instructions = fn_output_parser.get_format_instructions()


fn_prompt_template = PromptTemplate(
    input_variables=["question"],
    template=frac_num_temp,
    partial_variables={"format_instructions": fn_format_instructions}
)

from langchain import PromptTemplate, FewShotPromptTemplate

# First, create the list of few shot examples.
examples = [
{"question" : "What is 234-187?", "topic" : "Numbers and Numerations"},

{"question" : "791+3284", "topic" : "Numbers and Numerations"},

{"question" : "2384-482", "topic" : "Numbers and Numerations"},

{"question" : "What is 64/4?", "topic" : "Numbers and Numerations"},

{"question" : "A printing company has 11 printing machines. Each printing machine costs $2,300. How much did the company pay for the machines?", "topic" : "Numbers and Numerations"},

{"question" : "Find the answer of 2366/14", "topic" : "Numbers and Numerations"},

{"question" : "Find the answer of 12.8x3", "topic" : "Numbers and Numerations"},

{"question" : "Round 45365 to the nearest hundreds.", "topic" : "Numbers and Numerations"},

{"question" : "Round 25000 to the nearest ten thousand.", "topic" : "Numbers and Numerations"},

{"question" : "The population of a city is 104,511. Round this population to the nearest ten thousand.", "topic" : "Numbers and Numerations"},

{"question" : "1500/15", "topic" : "Numbers and Numerations"},

{"question" : "Sanji scored 345 points in the first round of a video game and 676 points in the second round. His total score after the third round was 2011 points. How many more points did Sanji score in the third round of the video game than in the first round?", "topic" : "Numbers and Numerations"},

{"question" : "38.13/31.213", "topic" : "Numbers and Numerations"},

{"question" : "Robin made a pie and cut it into 3 pieces and then ate 1 of them, what fraction of the pie did Robin eat?", "topic" : "Fractions"},

{"question" : "If you have a jug that contains 4 and 5/9 liters of juice and you pour out 11/18 of it, how much juice remains in the jug?", "topic" : "Fractions"},

{"question" : "If you have a pizza, and you eat 4/24 of it, how many slices have you eaten if the pizza was originally cut into 12 equal slices?", "topic" : "Fractions"},

{"question" : "Order these fractions form least to greatest: 1/2, 3/5, 4/9, and 5/11", "topic" : "Fractions"},

{"question" : "Which one is greater 12/43 or 1/2?", "topic" : "Fractions"},

{"question" : "Order these fractions in a descending order: 2/5, 7/9, 8/11, and 5/13", "topic" : "Fractions"},

{"question" : "5/2 / 5/7", "topic" : "Fractions"},

{"question" : "3/2 / 3/11", "topic" : "Fractions"},

{"question" : "3/22 / 9/3", "topic" : "Fractions"},

{"question" : "Pencils come in packages of 5. Erasers come in packages of 7. Peter wants to purchase the smallest number of pencils and erasers so that he will have exactly 1 eraser per pencil. How many packages of pencils and erasers should Phillip buy?", "topic" : "Fractions"},

{"question" : "Boxes that are 8 inches tall are being stacked next to boxes that are 36 inches tall. What is the shortest height at which the two stacks will be the same height?", "topic" : "Fractions"},

{"question" : "Two neon lights are turned on at the same time. One blinks every 2 seconds and the other blinks every 5 seconds. In 2 minutes, how many times will they blink at the same time?", "topic" : "Fractions"},


{"question" : "The perimeter of a rectangular pool is 48 meters. If the length of the pool is 11 meters, then find its width.", "topic" : "Geometry"},

{"question" : "The area of a rectangular fence is 225 square feet. If the width of the fence is 25 feet, then find its length.", "topic" : "Geometry"},

{"question" : "Mr. Hample is putting a new patio in his backyard. The patio will measure 18 ft by 9 ft. He is planning to put a brick border around the patio. How many feet of brick will he have for the border?", "topic" : "Geometry"},

{"question" : "A cube is a rectangular prism with the same measurement for length, width, and height. If a cube is 9.5 inches tall, what is its volume?", "topic" : "Geometry"},

{"question" : "A box is 4 feet wide, 11 feet deep and 9 feet tall. What is the volume of the drawer?", "topic" : "Geometry"},

{"question" : "A desk is 1.5 feet wide and 3.1 feet long. It is 2 feet above the floor. What is the volume of the desk?", "topic" : "Geometry"},

{"question" : "Find the probability of getting a 6 when a card is drawn from the pack of 52 cards.", "topic" : "Probability"},

{"question" : "There are 6 green 11 red balls. Two balls are selected one by one without replacement. Find the probability that first is green and second is red.", "topic" : "Probability"},

{"question" : "Two dice are rolled together. What is the probability as getting at least one '6'?", "topic" : "Probability"},

{"question" : "Find the next number in these number sequences 2, 8, 20, 44, 92, 188, 380.", "topic" : "Patterns"},

{"question" : "Find the next two numbers in these number sequences 15, 19, 23, 27, 31, 35, 39.", "topic" : "Patterns"},

{"question" : "Find the next number in these number sequences 21, 35, 49, 63, 77, 91, 105", "topic" : "Patterns"},

{"question" : "What is 2761 in expanded form?", "topic" : "Place Value"},

{"question" : "What is the value of the digit 3 in the number 1348?", "topic" : "Place Value"},

{"question" : "Write the number two hundred and twenty five in standard form.", "topic" : "Place Value"},

{"question" : "A number has 4 tens and 3 more ones than tens. What is the number?", "topic" : "Place Value"},

{"question" : "What is f in this equation f/18 = 5/9", "topic" : "Algebra"},

{"question" : "What is y in this equation 2y-10 = 5-y", "topic" : "Algebra"},

{"question" : "What is y in this equation (3+5)y  = 5x16", "topic" : "Algebra"},

{"question" : "21 – x at x = 1", "topic" : "Algebra"},

{"question" : "5x(r + 8) at r = 125", "topic" : "Algebra"},

{"question" : "c – 9 at c = 16", "topic" : "Algebra"},

{"question" : "Determine the mean, median, and mode of the given numbers: 11, 13, 22, 11, 9, 5, 12, 8, 30.", "topic" : "Statistics"},

{"question" : "What is the mode of the following set of numbers: 13, 13, 18, 18, 9, 5, 13, 12", "topic" : "Statistics"},

{"question" : "What is the SI unit for weight?", "topic" : "Units of Measurement"},

{"question" : "Subtract 15 m 5 cm from 11 m 87 cm. ", "topic" : "Units of Measurement"},

{"question" : "A bicycling club has 88 members, of which 36 are males and the rest are females. What is the ratio of females to males?", "topic" : "Ratios and Proportions"},

{"question" : "The ratio of cakes to cookies is 2:3. If there are 360 cookies, how many cakes are there?", "topic" : "Ratios and Proportions"},

{"question" : "Vito uses 8 liters of water to water 48 flower pots. He is wondering how many liters of water (w) it would take to water 30 flower pots. He assumes he'll use the same amount of water on each pot.", "topic" : "Ratios and Proportions"}
]

example_formatter_template = """
question: {question}
topic: {topic}\n
"""
example_prompt = PromptTemplate(
    input_variables=["question", "topic"],
    template=example_formatter_template,
)

# Finally, we create the `FewShotPromptTemplate` object.
few_shot_prompt = FewShotPromptTemplate(
    # These are the examples we want to insert into the prompt.
    examples=examples,
    # This is how we want to format the examples when we insert them into the prompt.
    example_prompt=example_prompt,
    # The prefix is some text that goes before the examples in the prompt.
    # Usually, this consists of intructions.
    prefix="Classify the topic of every input",
    # The suffix is some text that goes after the examples in the prompt.
    # Usually, this is where the user input will go
    suffix="question: {input}\ntopic:",
    # The input variables are the variables that the overall prompt expects.
    input_variables=["input"],
    # The example_separator is the string we will use to join the prefix, examples, and suffix together with.
    example_separator="\n\n",
)

from langchain.chains import LLMChain

trained_llm = LLMChain(llm=llm, prompt=few_shot_prompt)

# Run the chain only specifying the input variable.
#print(trained_llm.run("What is the expanded form of 1324?"))

from langchain.chains import LLMChain
from langchain.chains import SimpleSequentialChain

topic_llm = LLMChain(llm=llm, prompt=prompt_template)
math_llm = LLMChain(llm=llm, prompt=math_prompt_template)
word_llm = LLMChain(llm=llm, prompt=word_prompt_template)
chg_wp_llm = LLMChain(llm=llm, prompt=chg_wp_prompt_template)
answer_llm = LLMChain(llm=llm, prompt=answer_prompt_template)
fn_llm = LLMChain(llm=llm, prompt=fn_prompt_template)

if TOPIC_PROMPT_ENGG:
  topic_chain = SimpleSequentialChain(chains=[trained_llm, topic_llm],
                                              verbose=False
                                              )
else:
  topic_chain = topic_llm

Qs = open(input_file_name, "r")
q_a = 'q'
passes = 0
fail = 0
num = 0
cnt = 0
topic = ""
topics = ""

for line in Qs:
  if line.strip():

    cnt +=1
    if cnt == 1:
      q = str(line)

      cnt = 0
      generated_question = generation_of_question_list(q, "Similar", 1, "Only Generation")
      print(generated_question[0])

Verbose = False
gen_question = generation_of_question_list("Samantha is planning a road trip from New York to Florida. She plans to drive 765 miles on the first day and 632 miles on the second day. How many miles will Samantha have driven after these two days?", "Similar", 1, "Only Generation")
print(gen_question)

base_gen("A pet store has 48 bags of dog food in stock, and they want to distribute them equally among 8 local animal shelters. How many bags of dog food will each animal shelter receive?", "M", 5)

interface = gr.Interface(fn=generation_of_question_list,
                         inputs=[gr.Textbox(label="Please enter your questions.", lines=5), gr.Radio(["Very Easy", "Easy", "Similar", "Hard", "Very Hard"], label="Complexity", value="Similar"), gr.Number(label="Number of questions for generation", precision=0, minimum=1, value=1), gr.Radio(["Only Answer", "Only Generation", "Generate with Answer"], label="Output Mode", value="Only Generation")],
                         outputs=[gr.Textbox(label="New questions", lines=5), gr.Textbox(label="Answers (Not Reliable)", lines=4), gr.Textbox(label="Topics covered", lines=2)],
                         title="MathGPT - Generate Practice Tests for Mathematics using AI",
                         description = "A tool to generate mathematics questions for practice tests based on sample questions (trained extensively up to grade 6 level).",
                         examples=[["Q: Which fraction is greater 5/6 or 2/3?", "Similar", 1, "Only Generation"], ["Q: Samantha is planning a road trip from New York to Florida. She plans to drive 765 miles on the first day and 632 miles on the second day. How many miles will Samantha have driven after these two days?", "Very Hard", 2, "Only Answer"], ["Q: Sarah is planning to bake chocolate chip cookies, and her recipe requires 4 cups of chocolate chips for each batch. If she wants to make 5 batches of cookies, how many cups of chocolate chips does she need in total?", "Very Easy", 1, "Generate with Answer"]])

interface.launch(debug=False)